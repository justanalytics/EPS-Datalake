{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name"
		},
		"dwhsvr_dataanalytics_prod_dwh_dataanalytics": {
			"type": "string"
		},
		"sqlsvr_di_guzzle_prod": {
			"type": "string"
		},
		"HttpServer1": {
			"type": "string"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/PrepareRequestBodyAndInvokeGuzzleBatch')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetJobConfig",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlDWSource",
								"sqlReaderQuery": {
									"value": "SELECT  [Job_ID]\n      ,[Batch_ID]\n      ,[Job_Name]\n      ,[Guzzle_Obj_Ref]\n      ,[Guzzle_Job_Params]\n      ,[Spark_Config]\n  FROM  [CTL].[TB_Job_Configuration]\nwhere job_id = '@{pipeline().parameters.job_id}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "AzureSqlDWTable",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "''"
								}
							}
						}
					},
					{
						"name": "Set Context Params",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "GetJobConfig",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "contextParams",
							"value": {
								"value": "@split(activity('GetJobConfig').output.firstRow['Guzzle_Obj_Ref'], ',')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set System",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set Context Params",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "system",
							"value": {
								"value": "@variables('contextParams')[0]",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set Location",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set Context Params",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "location",
							"value": {
								"value": "@if(equals(length(variables('contextParams')), 2), variables('contextParams')[1], 'NA')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set Environment",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "GetJobConfig",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "environment",
							"value": {
								"value": "@json(split(split(activity('GetJobConfig').output.firstRow['Guzzle_Job_Params'], ',')[0], ':')[1])",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set Additional Params",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "GetJobConfig",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "additionalParams",
							"value": {
								"value": "@skip(split(activity('GetJobConfig').output.firstRow['Guzzle_Job_Params'], ','), 1)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set Spark Env",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "GetJobConfig",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "sparkEnv",
							"value": {
								"value": "@activity('GetJobConfig').output.firstRow['Spark_Config']",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Prepare Business Date Json",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "business_date_json",
							"value": {
								"value": "@if(pipeline().parameters.isMultiBatch, concat('\"businessDateRange\": {\"startDate\": \"${prev_business_ts}\",\"endDate\":\"', pipeline().parameters.datetime, '\"},\"period\":\"', string(pipeline().parameters.period), '\"'), concat('\"businessDate\":\"', pipeline().parameters.datetime, '\"'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Invoke Guzzle Batch",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Prepare Business Date Json",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set Spark Env",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set Additional Params",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set Environment",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set Location",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set System",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "InitializeGuzzleBatchRun",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"initialize_batch_body": {
									"value": "{\"contextParams\":{\"system\":\"@{variables('system')}\" @{if(equals(variables('location'), 'NA'), '', concat(',\"location\":\"', variables('location'), '\"'))}},@{variables('business_date_json')},\"environment\":\"@{variables('environment')}\"}",
									"type": "Expression"
								},
								"run_stage_body": {
									"value": "{\"system\": \"@{variables('system')}\", @{if(equals(variables('location'), 'NA'), '', concat('\"location\":\"', variables('location'), '\",'))} \"guzzle.spark.name\": \"@{variables('sparkEnv')}\", \"stage\": \"@{pipeline().parameters.stage}\", \"environment\":\"@{variables('environment')}\" @{if(greaterOrEquals(length(variables('additionalParams')), 1), concat(',', join(variables('additionalParams'), ',')), '')}}",
									"type": "Expression"
								},
								"business_date": {
									"value": "@pipeline().parameters.datetime",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "GetFailedBatchInfo",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Invoke Guzzle Batch",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select * from [dbo].[batch_control] where batch_status='FAILED' and system='@{variables('system')}' @{if(equals(variables('location'), 'NA'), '', concat('and location', if(equals(variables('location'), 'null'), ' is null', concat('=''', variables('location'), ''''))))}",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "GuzzleDB",
								"type": "DatasetReference"
							}
						}
					},
					{
						"name": "GetFailedJobInfo",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "GetFailedBatchInfo",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select\n*,\n(select parameter_value from dbo.job_info_param where 1=1 and parameter_name = 'job_status_url' and job_info_param.job_instance_id = job_info.job_instance_id) job_databricks_url,\n(select concat('<<Your blob storage URL>>',parameter_value,'<<Your blob query string>>') from dbo.job_info_param where 1=1 and parameter_name = 'log_file' and job_info_param.job_instance_id = job_info.job_instance_id) job_log_file\nfrom dbo.job_info\nwhere 1=1\nand batch_id='@{activity('GetFailedBatchInfo').output.firstRow['batch_id']}'\nand status in ('FAILED','ABORTED') and tag not in ('workunit', 'publish')\norder by job_info.job_instance_id desc",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "GuzzleDB",
								"type": "DatasetReference"
							}
						}
					},
					{
						"name": "Set Stages",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "GetFailedBatchInfo",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "stages",
							"value": {
								"value": "@split(pipeline().parameters.stage, ',')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set Failed Stage",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set Stages",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "failed_stage",
							"value": {
								"value": "@if(equals(activity('GetFailedBatchInfo').output.firstRow[concat(trim(variables('stages')[0]), '_status')], 'FAILED'), trim(variables('stages')[0]), \nif(equals(activity('GetFailedBatchInfo').output.firstRow[concat(trim(variables('stages')[1]), '_status')], 'FAILED'), trim(variables('stages')[1]), trim(variables('stages')[2])))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ErrorNotification",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "GetFailedJobInfo",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set Failed Stage",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotificationPipeline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"emails": {
									"value": "@pipeline().parameters.emails",
									"type": "Expression"
								},
								"pipeline_name": {
									"value": "@pipeline().parameters.parent_pipeline_name",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline().parameters.parent_pipeline_id",
									"type": "Expression"
								},
								"status": "ERROR",
								"business_date": {
									"value": "@trim(replace(pipeline().parameters.datetime, ' 00:00:00', ''))",
									"type": "Expression"
								},
								"start_time": {
									"value": "@pipeline().parameters.start_time",
									"type": "Expression"
								},
								"end_time": {
									"value": "@formatDateTime(utcnow(), 'yyyy-MM-dd HH:mm:ss')",
									"type": "Expression"
								},
								"failure_info": {
									"value": "<div style='padding-left: 12px'>\n<div>Guzzle Batch Context</div>\n<div style='padding-left: 12px'>\n<div>System: @{variables('system')}</div>\n<div>Location: @{variables('location')}</div>\n</div>\n<div>Guzzle Batch Stage: @{variables('failed_stage')}</div>\n<div>Guzzle Job Name: @{activity('GetFailedJobInfo').output.firstRow['name']}</div>\n<div>Batch ID: @{activity('GetFailedBatchInfo').output.firstRow['batch_id']}</div>\n<div>Job Instance ID: @{activity('GetFailedJobInfo').output.firstRow['job_instance_id']}</div>\n<div>Job Log Message: @{activity('GetFailedJobInfo').output.firstRow['message']}</div>\n<div>Guzzle Log URL: @{activity('GetFailedJobInfo').output.firstRow['job_log_file']}</div>\n<div>Databricks Log URL: @{activity('GetFailedJobInfo').output.firstRow['job_databricks_url']}</div>\n</div>",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Raise Exception",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ErrorNotification",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "status",
							"value": {
								"value": "@add(1, 1)",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"job_id": {
						"type": "int"
					},
					"datetime": {
						"type": "string"
					},
					"isMultiBatch": {
						"type": "bool"
					},
					"period": {
						"type": "int",
						"defaultValue": 1
					},
					"stage": {
						"type": "string"
					},
					"parent_pipeline_name": {
						"type": "string"
					},
					"parent_pipeline_id": {
						"type": "string"
					},
					"emails": {
						"type": "string"
					},
					"start_time": {
						"type": "string"
					}
				},
				"variables": {
					"business_date_json": {
						"type": "String"
					},
					"system": {
						"type": "String"
					},
					"location": {
						"type": "String"
					},
					"contextParams": {
						"type": "Array"
					},
					"environment": {
						"type": "String"
					},
					"additionalParams": {
						"type": "Array"
					},
					"sparkEnv": {
						"type": "String"
					},
					"status": {
						"type": "String"
					},
					"failed_stage": {
						"type": "String"
					},
					"stages": {
						"type": "Array"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlDWTable')]",
				"[concat(variables('factoryId'), '/pipelines/InitializeGuzzleBatchRun')]",
				"[concat(variables('factoryId'), '/datasets/GuzzleDB')]",
				"[concat(variables('factoryId'), '/pipelines/EmailNotificationPipeline')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDWTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('dwhsvr_dataanalytics_prod_dwh_dataanalytics')]",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"TableName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [],
				"typeProperties": {
					"tableName": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/InitializeGuzzleBatchRun')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Set Context Params",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "contextParams",
							"value": {
								"value": "@string(json(pipeline().parameters.initialize_batch_body)['contextParams'])",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set System",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set Context Params",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "system",
							"value": {
								"value": "@json(variables('contextParams'))['system']",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set Location",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set Context Params",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "location",
							"value": {
								"value": "@if(contains(json(variables('contextParams')), 'location'), json(variables('contextParams'))['location'], 'NA')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set Stages",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "stages",
							"value": {
								"value": "@split(json(pipeline().parameters.run_stage_body)['stage'], ',')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Initialize Batch",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Set System",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set Location",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set Stages",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "POST",
									"additionalHeaders": "Content-Type: application/json",
									"requestBody": {
										"value": "@{pipeline().parameters.initialize_batch_body}",
										"type": "Expression"
									},
									"requestTimeout": ""
								}
							},
							"dataset": {
								"referenceName": "Initialize_Batch",
								"type": "DatasetReference"
							}
						}
					},
					{
						"name": "Wait Until Started",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "Initialize Batch",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greaterOrEquals(activity('GetCount').output.firstRow.count, 1)",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Wait5Seconds",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 5
									}
								},
								{
									"name": "GetCount",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Wait5Seconds",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "select count(*) as count from dbo.batch_control where business_date='@{pipeline().parameters.business_date}' and system='@{variables('system')}' @{if(equals(variables('location'), 'NA'), '', concat('and location', if(equals(variables('location'), 'null'), ' is null', concat('=''', variables('location'), ''''))))}",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00"
										},
										"dataset": {
											"referenceName": "GuzzleDB",
											"type": "DatasetReference"
										}
									}
								}
							],
							"timeout": "0.00:01:00"
						}
					},
					{
						"name": "Run Stage",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "GetAllBatchesByContexts",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "POST",
									"additionalHeaders": "Content-Type: application/json",
									"requestBody": {
										"value": "@{pipeline().parameters.run_stage_body}",
										"type": "Expression"
									},
									"requestTimeout": ""
								}
							},
							"dataset": {
								"referenceName": "Run_Stage",
								"type": "DatasetReference"
							}
						}
					},
					{
						"name": "GetAllBatchesByContexts",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Wait Until Started",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select batch_id from dbo.batch_control where system='@{variables('system')}' @{if(equals(variables('location'), 'NA'), '', concat('and location', if(equals(variables('location'), 'null'), ' is null', concat('=''', variables('location'), ''''))))} and (batch_status='OPEN' or batch_status='FAILED') order by business_date",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "GuzzleDB",
								"type": "DatasetReference"
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "TrackAllBatchesSequentially",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Run Stage",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetAllBatchesByContexts').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "If Condition1",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@not(variables('failureFlag'))",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "WaitUntilBatchFinishes",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "TrackGuzzleBatchRun",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"batch_id": {
															"value": "@item()['batch_id']",
															"type": "Expression"
														},
														"stages": {
															"value": "@variables('stages')",
															"type": "Expression"
														}
													}
												}
											},
											{
												"name": "Set Failure Flag",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "WaitUntilBatchFinishes",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"variableName": "failureFlag",
													"value": true
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "RaiseExceptionIfFailure",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "TrackAllBatchesSequentially",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "status",
							"value": {
								"value": "@if(variables('failureFlag'), 1, 'SUCCESS')",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"initialize_batch_body": {
						"type": "string"
					},
					"run_stage_body": {
						"type": "string"
					},
					"business_date": {
						"type": "string"
					}
				},
				"variables": {
					"business_date": {
						"type": "String"
					},
					"stages": {
						"type": "Array"
					},
					"failureFlag": {
						"type": "Boolean"
					},
					"contextParams": {
						"type": "String"
					},
					"system": {
						"type": "String"
					},
					"location": {
						"type": "String"
					},
					"status": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Initialize_Batch')]",
				"[concat(variables('factoryId'), '/datasets/Run_Stage')]",
				"[concat(variables('factoryId'), '/datasets/GuzzleDB')]",
				"[concat(variables('factoryId'), '/pipelines/TrackGuzzleBatchRun')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/GuzzleDB')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('sqlsvr_di_guzzle_prod')]",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/EmailNotificationPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SendEmailNotification",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://<<Your Logic App URL>>",
							"method": "POST",
							"headers": {
								"Content-Type": "application/json"
							},
							"body": {
								"value": "{\n  \"pipeline_name\": \"@{pipeline().parameters.pipeline_name}\",\n  \"pipeline_id\": \"@{pipeline().parameters.pipeline_id}\",\n  \"status\":\"@{pipeline().parameters.status}\",\n  \"data_factory_name\":\"@{pipeline().DataFactory}\",\n  \"business_date\": \"@{pipeline().parameters.business_date}\",\n  \"start_time\": \"@{addhours(pipeline().parameters.start_time,8)}\",\n  \"end_time\": \"@{addhours(pipeline().parameters.end_time,8)}\",\n  \"failure_info\": \"@{pipeline().parameters.failure_info}\",\n  \"emails\": \"@{pipeline().parameters.emails}\"\n}",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"emails": {
						"type": "string"
					},
					"pipeline_name": {
						"type": "string"
					},
					"pipeline_id": {
						"type": "string"
					},
					"status": {
						"type": "string"
					},
					"business_date": {
						"type": "string"
					},
					"start_time": {
						"type": "string"
					},
					"end_time": {
						"type": "string"
					},
					"failure_info": {
						"type": "string"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Initialize_Batch')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('HttpServer1')]",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation",
						"relativeUrl": "api/batches/initialize?mode=default"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Run_Stage')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('HttpServer1')]",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation",
						"relativeUrl": "api/batches/run_stage?mode=default"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/TrackGuzzleBatchRun')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "WaitForAllStagesToFinish",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.stages",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "If Condition1",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@not(variables('failureFlag'))",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "WaitUntilStageFinished",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "TrackGuzzleStageRun",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"stage": {
															"value": "@concat(trim(item()), '_status')",
															"type": "Expression"
														},
														"batch_id": {
															"value": "@pipeline().parameters.batch_id",
															"type": "Expression"
														}
													}
												}
											},
											{
												"name": "Set Failure Flag",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "WaitUntilStageFinished",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"variableName": "failureFlag",
													"value": true
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "RaiseExceptionIfFailure",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "WaitForAllStagesToFinish",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "status",
							"value": {
								"value": "@if(variables('failureFlag'), 1, 'SUCCESS')",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"batch_id": {
						"type": "string"
					},
					"stages": {
						"type": "array"
					}
				},
				"variables": {
					"failureFlag": {
						"type": "Boolean"
					},
					"status": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/TrackGuzzleStageRun')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TrackGuzzleStageRun')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "WaitUntilStageFinish",
						"type": "Until",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@if(variables('statusChangedToRunning'), not(equals(activity('GetStageStatus').output.firstRow[pipeline().parameters.stage], 'RUNNING')), or(or(equals(activity('GetStageStatus').output.firstRow[pipeline().parameters.stage], 'SUCCESS'), equals(activity('GetStageStatus').output.firstRow[pipeline().parameters.stage], 'WARNING')), or(equals(activity('GetStageStatus').output.firstRow[pipeline().parameters.stage], 'FAILED'), equals(activity('GetStageStatus').output.firstRow[pipeline().parameters.stage], 'ABORTED'))))",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Wait2minutes",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 120
									}
								},
								{
									"name": "GetStageStatus",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Wait2minutes",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "select @{pipeline().parameters.stage} from dbo.batch_control where batch_id=@{pipeline().parameters.batch_id}",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00"
										},
										"dataset": {
											"referenceName": "GuzzleDB",
											"type": "DatasetReference"
										}
									}
								},
								{
									"name": "If Status Changed To RUNNING",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "GetStageStatus",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@and(not(variables('statusChangedToRunning')), equals(activity('GetStageStatus').output.firstRow[pipeline().parameters.stage], 'RUNNING'))",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Set status changed to RUNNING",
												"type": "SetVariable",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"variableName": "statusChangedToRunning",
													"value": true
												}
											}
										]
									}
								}
							],
							"timeout": "0.04:00:00"
						}
					},
					{
						"name": "RaiseExceptionIfFailed",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "WaitUntilStageFinish",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "status",
							"value": {
								"value": "@if(or(equals(activity('GetStageStatus').output.firstRow[pipeline().parameters.stage], 'SUCCESS'), equals(activity('GetStageStatus').output.firstRow[pipeline().parameters.stage], 'WARNING')), 'SUCCESS', 1)",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"stage": {
						"type": "string"
					},
					"batch_id": {
						"type": "string"
					}
				},
				"variables": {
					"status": {
						"type": "String"
					},
					"statusChangedToRunning": {
						"type": "Boolean"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/GuzzleDB')]"
			]
		}
	]
}