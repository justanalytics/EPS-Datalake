{
	"name": "InitializeGuzzleBatchRun",
	"properties": {
		"activities": [
			{
				"name": "Set Context Params",
				"type": "SetVariable",
				"dependsOn": [],
				"userProperties": [],
				"typeProperties": {
					"variableName": "contextParams",
					"value": {
						"value": "@string(json(pipeline().parameters.initialize_batch_body)['contextParams'])",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Set System",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "Set Context Params",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"variableName": "system",
					"value": {
						"value": "@json(variables('contextParams'))['system']",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Set Location",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "Set Context Params",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"variableName": "location",
					"value": {
						"value": "@if(contains(json(variables('contextParams')), 'location'), json(variables('contextParams'))['location'], 'NA')",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Set Stages",
				"type": "SetVariable",
				"dependsOn": [],
				"userProperties": [],
				"typeProperties": {
					"variableName": "stages",
					"value": {
						"value": "@split(json(pipeline().parameters.run_stage_body)['stage'], ',')",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Initialize Batch",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "Set System",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "Set Location",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "Set Stages",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "JsonSource",
						"storeSettings": {
							"type": "HttpReadSettings",
							"requestMethod": "POST",
							"additionalHeaders": "Content-Type: application/json",
							"requestBody": {
								"value": "@{pipeline().parameters.initialize_batch_body}",
								"type": "Expression"
							},
							"requestTimeout": ""
						},
						"formatSettings": {
							"type": "JsonReadSettings"
						}
					},
					"dataset": {
						"referenceName": "Initialize_Batch",
						"type": "DatasetReference"
					}
				}
			},
			{
				"name": "Wait Until Started",
				"type": "Until",
				"dependsOn": [
					{
						"activity": "Initialize Batch",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@greaterOrEquals(activity('GetCount').output.firstRow.count, 1)",
						"type": "Expression"
					},
					"activities": [
						{
							"name": "Wait5Seconds",
							"type": "Wait",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"waitTimeInSeconds": 10
							}
						},
						{
							"name": "GetCount",
							"type": "Lookup",
							"dependsOn": [
								{
									"activity": "Wait5Seconds",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"sqlReaderQuery": {
										"value": "select count(*) as count from dbo.batch_control where business_date='@{pipeline().parameters.business_date}' and system='@{variables('system')}' @{if(equals(variables('location'), 'NA'), '', concat('and location', if(equals(variables('location'), 'null'), ' is null', concat('=''', variables('location'), ''''))))}",
										"type": "Expression"
									},
									"queryTimeout": "02:00:00"
								},
								"dataset": {
									"referenceName": "GuzzleDB",
									"type": "DatasetReference"
								}
							}
						}
					],
					"timeout": "2.0:01:00"
				}
			},
			{
				"name": "Run Stage",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "GetAllBatchesByContexts",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "JsonSource",
						"storeSettings": {
							"type": "HttpReadSettings",
							"requestMethod": "POST",
							"additionalHeaders": "Content-Type: application/json",
							"requestBody": {
								"value": "@{pipeline().parameters.run_stage_body}",
								"type": "Expression"
							},
							"requestTimeout": ""
						}
					},
					"dataset": {
						"referenceName": "Run_Stage",
						"type": "DatasetReference"
					}
				}
			},
			{
				"name": "GetAllBatchesByContexts",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "Wait Until Started",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": {
							"value": "select batch_id from dbo.batch_control where system='@{variables('system')}' @{if(equals(variables('location'), 'NA'), '', concat('and location', if(equals(variables('location'), 'null'), ' is null', concat('=''', variables('location'), ''''))))} and (batch_status='OPEN' or batch_status='FAILED') order by business_date",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00"
					},
					"dataset": {
						"referenceName": "GuzzleDB",
						"type": "DatasetReference"
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "TrackAllBatchesSequentially",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "Run Stage",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('GetAllBatchesByContexts').output.value",
						"type": "Expression"
					},
					"isSequential": true,
					"activities": [
						{
							"name": "If Condition1",
							"type": "IfCondition",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"expression": {
									"value": "@not(variables('failureFlag'))",
									"type": "Expression"
								},
								"ifTrueActivities": [
									{
										"name": "WaitUntilBatchFinishes",
										"type": "ExecutePipeline",
										"dependsOn": [],
										"userProperties": [],
										"typeProperties": {
											"pipeline": {
												"referenceName": "TrackGuzzleBatchRun",
												"type": "PipelineReference"
											},
											"waitOnCompletion": true,
											"parameters": {
												"batch_id": {
													"value": "@item()['batch_id']",
													"type": "Expression"
												},
												"stages": {
													"value": "@variables('stages')",
													"type": "Expression"
												}
											}
										}
									},
									{
										"name": "Set Failure Flag",
										"type": "SetVariable",
										"dependsOn": [
											{
												"activity": "WaitUntilBatchFinishes",
												"dependencyConditions": [
													"Failed"
												]
											}
										],
										"userProperties": [],
										"typeProperties": {
											"variableName": "failureFlag",
											"value": true
										}
									}
								]
							}
						}
					]
				}
			},
			{
				"name": "RaiseExceptionIfFailure",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "TrackAllBatchesSequentially",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"variableName": "status",
					"value": {
						"value": "@if(variables('failureFlag'), 1, 'SUCCESS')",
						"type": "Expression"
					}
				}
			}
		],
		"parameters": {
			"initialize_batch_body": {
				"type": "string"
			},
			"run_stage_body": {
				"type": "string"
			},
			"business_date": {
				"type": "string"
			}
		},
		"variables": {
			"business_date": {
				"type": "String"
			},
			"stages": {
				"type": "Array"
			},
			"failureFlag": {
				"type": "Boolean"
			},
			"contextParams": {
				"type": "String"
			},
			"system": {
				"type": "String"
			},
			"location": {
				"type": "String"
			},
			"status": {
				"type": "String"
			}
		},
		"annotations": []
	}
}