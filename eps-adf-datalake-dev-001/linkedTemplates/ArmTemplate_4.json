{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "eps-adf-datalake-dev-001"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/PrepareRequestBodyAndInvokeGuzzleBatch')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetJobConfig",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select job_id,batch_id,job_name,guzzle_obj_ref,guzzle_job_params,spark_config,run_stage from [dbo].[JBS_GUZZLE_FLOW] where job_id=2",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set Context Params",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "GetJobConfig",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "contextParams",
							"value": {
								"value": "@split(activity('GetJobConfig').output.firstRow['Guzzle_Obj_Ref'], ',')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set System",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set Context Params",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "system",
							"value": {
								"value": "@variables('contextParams')[0]",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set Location",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set Context Params",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "location",
							"value": {
								"value": "@if(equals(length(variables('contextParams')), 2), variables('contextParams')[1], 'NA')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set Environment",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "GetJobConfig",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "environment",
							"value": {
								"value": "@json(split(split(activity('GetJobConfig').output.firstRow['Guzzle_Job_Params'], ',')[0], ':')[1])",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set Additional Params",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "GetJobConfig",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "additionalParams",
							"value": {
								"value": "@skip(split(activity('GetJobConfig').output.firstRow['Guzzle_Job_Params'], ','), 1)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set Spark Env",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "GetJobConfig",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "sparkEnv",
							"value": {
								"value": "@activity('GetJobConfig').output.firstRow['Spark_Config']",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Prepare Business Date Json",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "business_date_json",
							"value": {
								"value": "@if(pipeline().parameters.isMultiBatch, concat('\"businessDateRange\": {\"startDate\": \"${prev_business_ts}\",\"endDate\":\"', pipeline().parameters.datetime, '\"},\"period\":\"', string(pipeline().parameters.period), '\"'), concat('\"businessDate\":\"', pipeline().parameters.datetime, '\"'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Invoke Guzzle Batch",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Prepare Business Date Json",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set Spark Env",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set Additional Params",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set Environment",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set Location",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set System",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "InitializeGuzzleBatchRun",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"initialize_batch_body": {
									"value": "{\"contextParams\":{\"system\":\"@{variables('system')}\" @{if(equals(variables('location'), 'NA'), '', concat(',\"location\":\"', variables('location'), '\"'))}},@{variables('business_date_json')},\"environment\":\"@{variables('environment')}\"}",
									"type": "Expression"
								},
								"run_stage_body": {
									"value": "{\"parameters\":{@{if(equals(variables('location'), 'NA'), '', concat('\"location\":\"', variables('location'), '\",'))} \"guzzle.spark.name\":\"@{variables('sparkEnv')}\",\"system\":\"@{variables('system')}\",\"stage\":\"@{pipeline().parameters.stage}\",\"environment\":\"@{variables('environment')}\" @{if(greaterOrEquals(length(variables('additionalParams')), 1), concat(',', join(variables('additionalParams'), ',')), '')} }",
									"type": "Expression"
								},
								"business_date": {
									"value": "@pipeline().parameters.datetime",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "GetFailedBatchInfo",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Invoke Guzzle Batch",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select * from [dbo].[batch_control] where batch_status='FAILED' and system='@{variables('system')}' @{if(equals(variables('location'), 'NA'), '', concat('and location', if(equals(variables('location'), 'null'), ' is null', concat('=''', variables('location'), ''''))))}",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "GuzzleDB",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "GetFailedJobInfo",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "GetFailedBatchInfo",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select\n*,\n(select parameter_value from dbo.job_info_param where 1=1 and parameter_name = 'job_status_url' and job_info_param.job_instance_id = job_info.job_instance_id) job_databricks_url,\n(select concat('<<Your blob storage URL>>',parameter_value,'<<Your blob query string>>') from dbo.job_info_param where 1=1 and parameter_name = 'log_file' and job_info_param.job_instance_id = job_info.job_instance_id) job_log_file\nfrom dbo.job_info\nwhere 1=1\nand batch_id='@{activity('GetFailedBatchInfo').output.firstRow['batch_id']}'\nand status in ('FAILED','ABORTED') and tag not in ('workunit', 'publish')\norder by job_info.job_instance_id desc",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "GuzzleDB",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set Stages",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "GetFailedBatchInfo",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "stages",
							"value": {
								"value": "@split(pipeline().parameters.stage, ',')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set Failed Stage",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set Stages",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "failed_stage",
							"value": {
								"value": "@if(equals(activity('GetFailedBatchInfo').output.firstRow[concat(trim(variables('stages')[0]), '_status')], 'FAILED'), trim(variables('stages')[0]), \nif(equals(activity('GetFailedBatchInfo').output.firstRow[concat(trim(variables('stages')[1]), '_status')], 'FAILED'), trim(variables('stages')[1]), trim(variables('stages')[2])))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ErrorNotification",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "GetFailedJobInfo",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set Failed Stage",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotificationPipeline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"emails": {
									"value": "@pipeline().parameters.emails",
									"type": "Expression"
								},
								"pipeline_name": {
									"value": "@pipeline().parameters.parent_pipeline_name",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline().parameters.parent_pipeline_id",
									"type": "Expression"
								},
								"status": "ERROR",
								"business_date": {
									"value": "@trim(replace(pipeline().parameters.datetime, ' 00:00:00', ''))",
									"type": "Expression"
								},
								"start_time": {
									"value": "@pipeline().parameters.datetime",
									"type": "Expression"
								},
								"end_time": {
									"value": "@formatDateTime(utcnow(), 'yyyy-MM-dd HH:mm:ss')",
									"type": "Expression"
								},
								"failure_info": {
									"value": "<div style='padding-left: 12px'>\n<div>Guzzle Batch Context</div>\n<div style='padding-left: 12px'>\n<div>System: @{variables('system')}</div>\n<div>Location: @{variables('location')}</div>\n</div>\n<div>Guzzle Batch Stage: @{variables('failed_stage')}</div>\n<div>Guzzle Job Name: @{activity('GetFailedJobInfo').output.firstRow['name']}</div>\n<div>Batch ID: @{activity('GetFailedBatchInfo').output.firstRow['batch_id']}</div>\n<div>Job Instance ID: @{activity('GetFailedJobInfo').output.firstRow['job_instance_id']}</div>\n<div>Job Log Message: @{activity('GetFailedJobInfo').output.firstRow['message']}</div>\n<div>Guzzle Log URL: @{concat('/guzzle/logs/',activity('GetFailedJobInfo').output.firstRow['job_log_file'])}</div>\n<div>Databricks Log URL: {activity('GetFailedJobInfo').output.firstRow['job_databricks_url']}\n</div>\n</div>",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Raise Exception",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ErrorNotification",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "status",
							"value": {
								"value": "@add(1, 1)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SuccessNotification",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "GetSuccessBatchInfo",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotificationPipeline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"emails": {
									"value": "@pipeline().parameters.emails",
									"type": "Expression"
								},
								"pipeline_name": {
									"value": "@pipeline().parameters.parent_pipeline_name",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline().parameters.parent_pipeline_id",
									"type": "Expression"
								},
								"status": "SUCCESS",
								"business_date": {
									"value": "@trim(replace(pipeline().parameters.datetime, ' 00:00:00', ''))",
									"type": "Expression"
								},
								"start_time": {
									"value": "@pipeline().parameters.datetime",
									"type": "Expression"
								},
								"end_time": {
									"value": "@formatDateTime(utcnow(), 'yyyy-MM-dd HH:mm:ss')",
									"type": "Expression"
								},
								"failure_info": {
									"value": "<div style='padding-left: 12px'>\n<div>Guzzle Batch Context</div>\n<div>Guzzle Batch Completed Successfuly</div>\n<div style='padding-left: 12px'>\n<div>System: @{variables('system')}</div>\n<div>Location: @{variables('location')}</div>\n</div>\n<div>Batch ID: @{activity('GetSuccessBatchInfo').output.firstRow['batch_id']}</div>\n</div>\n</div>",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "GetSuccessBatchInfo",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Invoke Guzzle Batch",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select * from [dbo].[batch_control] where batch_status in ('WARNING','SUCCESS') and system='@{variables('system')}' @{if(equals(variables('location'), 'NA'), '', concat('and location', if(equals(variables('location'), 'null'), ' is null', concat('=''', variables('location'), ''''))))}",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "GuzzleDB",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "PowerBI_Refresh_Opex",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "SuccessNotification",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PowerBI_DataSet_Refresh",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"Email": {
									"value": "@pipeline().parameters.emails",
									"type": "Expression"
								},
								"Datetime": {
									"value": "@trim(replace(pipeline().parameters.datetime, ' 00:00:00', ''))",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "PowerBI_Refresh_Rejection",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "PowerBI_Refresh_Trial_Balance",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PowerBI_DataSet_Refresh_Rejection",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "PowerBI_Refresh_Supply_Log",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "PowerBI_Refresh_Opex",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PowerBI_DataSet_Refresh_Supply_Log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "PowerBI_Refresh_Port_Calls",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "PowerBI_Refresh_Supply_Log",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PowerBI_DataSet_Refresh_Port_Calls",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "PowerBI_Refresh_Trial_Balance",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "PowerBI_Refresh_Port_Calls",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PowerBI_DataSet_Refresh_Trial_Balance",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"parameters": {
					"job_id": {
						"type": "int",
						"defaultValue": 1
					},
					"datetime": {
						"type": "string",
						"defaultValue": "2020-07-18 00:00:00"
					},
					"isMultiBatch": {
						"type": "bool",
						"defaultValue": false
					},
					"period": {
						"type": "int",
						"defaultValue": 1
					},
					"stage": {
						"type": "string",
						"defaultValue": "STG"
					},
					"parent_pipeline_name": {
						"type": "string"
					},
					"parent_pipeline_id": {
						"type": "string"
					},
					"emails": {
						"type": "string",
						"defaultValue": "agnit.chatterjee@justanalytics.com"
					},
					"start_time": {
						"type": "string",
						"defaultValue": "2020-07-18 00:00:00"
					}
				},
				"variables": {
					"business_date_json": {
						"type": "String"
					},
					"system": {
						"type": "String"
					},
					"location": {
						"type": "String"
					},
					"contextParams": {
						"type": "Array"
					},
					"environment": {
						"type": "String"
					},
					"additionalParams": {
						"type": "Array"
					},
					"sparkEnv": {
						"type": "String"
					},
					"status": {
						"type": "String"
					},
					"failed_stage": {
						"type": "String"
					},
					"stages": {
						"type": "Array"
					}
				},
				"annotations": [],
				"lastPublishTime": "2020-10-24T14:24:33Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PrepareRequestBodyAndInvokeGuzzleBatch_BKP_20201120_Guzzle2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetJobConfig",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select job_id,batch_id,job_name,guzzle_obj_ref,guzzle_job_params,spark_config,run_stage from [dbo].[JBS_GUZZLE_FLOW] where job_id=2",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set Context Params",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "GetJobConfig",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "contextParams",
							"value": {
								"value": "@split(activity('GetJobConfig').output.firstRow['Guzzle_Obj_Ref'], ',')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set System",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set Context Params",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "system",
							"value": {
								"value": "@variables('contextParams')[0]",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set Location",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set Context Params",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "location",
							"value": {
								"value": "@if(equals(length(variables('contextParams')), 2), variables('contextParams')[1], 'NA')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set Environment",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "GetJobConfig",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "environment",
							"value": {
								"value": "@json(split(split(activity('GetJobConfig').output.firstRow['Guzzle_Job_Params'], ',')[0], ':')[1])",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set Additional Params",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "GetJobConfig",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "additionalParams",
							"value": {
								"value": "@skip(split(activity('GetJobConfig').output.firstRow['Guzzle_Job_Params'], ','), 1)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set Spark Env",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "GetJobConfig",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "sparkEnv",
							"value": {
								"value": "@activity('GetJobConfig').output.firstRow['Spark_Config']",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Prepare Business Date Json",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "business_date_json",
							"value": {
								"value": "@if(pipeline().parameters.isMultiBatch, concat('\"businessDateRange\": {\"startDate\": \"${prev_business_ts}\",\"endDate\":\"', pipeline().parameters.datetime, '\"},\"period\":\"', string(pipeline().parameters.period), '\"'), concat('\"businessDate\":\"', pipeline().parameters.datetime, '\"'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Invoke Guzzle Batch",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Prepare Business Date Json",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set Spark Env",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set Additional Params",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set Environment",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set Location",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set System",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "InitializeGuzzleBatchRun",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"initialize_batch_body": {
									"value": "{\"contextParams\":{\"system\":\"@{variables('system')}\" @{if(equals(variables('location'), 'NA'), '', concat(',\"location\":\"', variables('location'), '\"'))}},@{variables('business_date_json')},\"environment\":\"@{variables('environment')}\"}",
									"type": "Expression"
								},
								"run_stage_body": {
									"value": "{\"parameters\":{@{if(equals(variables('location'), 'NA'), '', concat('\"location\":\"', variables('location'), '\",'))} \"guzzle.spark.name\":\"@{variables('sparkEnv')}\",\"system\":\"@{variables('system')}\",\"stage\":\"@{pipeline().parameters.stage}\",\"environment\":\"@{variables('environment')}\" @{if(greaterOrEquals(length(variables('additionalParams')), 1), concat(',', join(variables('additionalParams'), ',')), '')} }}",
									"type": "Expression"
								},
								"business_date": {
									"value": "@pipeline().parameters.datetime",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "GetFailedBatchInfo",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Invoke Guzzle Batch",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select * from [dbo].[batch_control] where batch_status='FAILED' and system='@{variables('system')}' @{if(equals(variables('location'), 'NA'), '', concat('and location', if(equals(variables('location'), 'null'), ' is null', concat('=''', variables('location'), ''''))))}",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "GuzzleDB",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "GetFailedJobInfo",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "GetFailedBatchInfo",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select\n*,\n(select parameter_value from dbo.job_info_param where 1=1 and parameter_name = 'job_status_url' and job_info_param.job_instance_id = job_info.job_instance_id) job_databricks_url,\n(select concat('<<Your blob storage URL>>',parameter_value,'<<Your blob query string>>') from dbo.job_info_param where 1=1 and parameter_name = 'log_file' and job_info_param.job_instance_id = job_info.job_instance_id) job_log_file\nfrom dbo.job_info\nwhere 1=1\nand batch_id='@{activity('GetFailedBatchInfo').output.firstRow['batch_id']}'\nand status in ('FAILED','ABORTED') and tag not in ('workunit', 'publish')\norder by job_info.job_instance_id desc",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "GuzzleDB",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set Stages",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "GetFailedBatchInfo",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "stages",
							"value": {
								"value": "@split(pipeline().parameters.stage, ',')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set Failed Stage",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set Stages",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "failed_stage",
							"value": {
								"value": "@if(equals(activity('GetFailedBatchInfo').output.firstRow[concat(trim(variables('stages')[0]), '_status')], 'FAILED'), trim(variables('stages')[0]), \nif(equals(activity('GetFailedBatchInfo').output.firstRow[concat(trim(variables('stages')[1]), '_status')], 'FAILED'), trim(variables('stages')[1]), trim(variables('stages')[2])))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ErrorNotification",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "GetFailedJobInfo",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set Failed Stage",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotificationPipeline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"emails": {
									"value": "@pipeline().parameters.emails",
									"type": "Expression"
								},
								"pipeline_name": {
									"value": "@pipeline().parameters.parent_pipeline_name",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline().parameters.parent_pipeline_id",
									"type": "Expression"
								},
								"status": "ERROR",
								"business_date": {
									"value": "@trim(replace(pipeline().parameters.datetime, ' 00:00:00', ''))",
									"type": "Expression"
								},
								"start_time": {
									"value": "@pipeline().parameters.datetime",
									"type": "Expression"
								},
								"end_time": {
									"value": "@formatDateTime(utcnow(), 'yyyy-MM-dd HH:mm:ss')",
									"type": "Expression"
								},
								"failure_info": {
									"value": "<div style='padding-left: 12px'>\n<div>Guzzle Batch Context</div>\n<div style='padding-left: 12px'>\n<div>System: @{variables('system')}</div>\n<div>Location: @{variables('location')}</div>\n</div>\n<div>Guzzle Batch Stage: @{variables('failed_stage')}</div>\n<div>Guzzle Job Name: @{activity('GetFailedJobInfo').output.firstRow['name']}</div>\n<div>Batch ID: @{activity('GetFailedBatchInfo').output.firstRow['batch_id']}</div>\n<div>Job Instance ID: @{activity('GetFailedJobInfo').output.firstRow['job_instance_id']}</div>\n<div>Job Log Message: @{activity('GetFailedJobInfo').output.firstRow['message']}</div>\n<div>Guzzle Log URL: @{concat('/guzzle/logs/',activity('GetFailedJobInfo').output.firstRow['job_log_file'])}</div>\n<div>Databricks Log URL: {activity('GetFailedJobInfo').output.firstRow['job_databricks_url']}\n</div>\n</div>",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Raise Exception",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ErrorNotification",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "status",
							"value": {
								"value": "@add(1, 1)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SuccessNotification",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "GetSuccessBatchInfo",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotificationPipeline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"emails": {
									"value": "@pipeline().parameters.emails",
									"type": "Expression"
								},
								"pipeline_name": {
									"value": "@pipeline().parameters.parent_pipeline_name",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline().parameters.parent_pipeline_id",
									"type": "Expression"
								},
								"status": "SUCCESS",
								"business_date": {
									"value": "@trim(replace(pipeline().parameters.datetime, ' 00:00:00', ''))",
									"type": "Expression"
								},
								"start_time": {
									"value": "@pipeline().parameters.datetime",
									"type": "Expression"
								},
								"end_time": {
									"value": "@formatDateTime(utcnow(), 'yyyy-MM-dd HH:mm:ss')",
									"type": "Expression"
								},
								"failure_info": {
									"value": "<div style='padding-left: 12px'>\n<div>Guzzle Batch Context</div>\n<div>Guzzle Batch Completed Successfuly</div>\n<div style='padding-left: 12px'>\n<div>System: @{variables('system')}</div>\n<div>Location: @{variables('location')}</div>\n</div>\n<div>Batch ID: @{activity('GetSuccessBatchInfo').output.firstRow['batch_id']}</div>\n</div>\n</div>",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "GetSuccessBatchInfo",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Invoke Guzzle Batch",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select * from [dbo].[batch_control] where batch_status in ('WARNING','SUCCESS') and system='@{variables('system')}' @{if(equals(variables('location'), 'NA'), '', concat('and location', if(equals(variables('location'), 'null'), ' is null', concat('=''', variables('location'), ''''))))}",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "GuzzleDB",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "powerbi_refresh",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "PowerBI_DataSet_Refresh_Trial_Balance",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PowerBI_DataSet_Refresh_Opex_Monitor",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"Email": {
									"value": "@pipeline().parameters.emails",
									"type": "Expression"
								},
								"Datetime": {
									"value": "@trim(replace(pipeline().parameters.datetime, ' 00:00:00', ''))",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "PowerBI_DataSet_Refresh_rejection",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "SuccessNotification",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PowerBI_DataSet_Refresh_Rejection",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "PowerBI_DataSet_Refresh_Supply_Log",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "PowerBI_DataSet_Refresh_rejection",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PowerBI_DataSet_Refresh_Supply_Log",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "PowerBI_DataSet_Refresh_Port_Calls",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "PowerBI_DataSet_Refresh_Supply_Log",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PowerBI_DataSet_Refresh_Port_Calls",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "PowerBI_DataSet_Refresh_Trial_Balance",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "PowerBI_DataSet_Refresh_Port_Calls",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PowerBI_DataSet_Refresh_Trial_Balance",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "PowerBI_DataSet_Refresh_Audit",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "powerbi_refresh",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PowerBI_DataSet_Refresh_Audit",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "PowerBI_DataSet_Refresh_Incident",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "PowerBI_DataSet_Refresh_Audit",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PowerBI_DataSet_Refresh_Incident",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "PowerBI_DataSet_Refresh_Inspection",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "PowerBI_DataSet_Refresh_Incident",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PowerBI_DataSet_Refresh_Inspection",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "PowerBI_DataSet_Refresh_Sire Inspection",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "PowerBI_DataSet_Refresh_Inspection",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PowerBI_DataSet_Refresh_Sire Inspection",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "PowerBI_DataSet_Refresh_Inspection Matching",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "PowerBI_DataSet_Refresh_Sire Inspection",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PowerBI_DataSet_Refresh_Inspection Matching",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"parameters": {
					"job_id": {
						"type": "int",
						"defaultValue": 1
					},
					"datetime": {
						"type": "string",
						"defaultValue": "2020-07-18 00:00:00"
					},
					"isMultiBatch": {
						"type": "bool",
						"defaultValue": false
					},
					"period": {
						"type": "int",
						"defaultValue": 1
					},
					"stage": {
						"type": "string",
						"defaultValue": "STG"
					},
					"parent_pipeline_name": {
						"type": "string"
					},
					"parent_pipeline_id": {
						"type": "string"
					},
					"emails": {
						"type": "string",
						"defaultValue": "agnit.chatterjee@justanalytics.com"
					},
					"start_time": {
						"type": "string",
						"defaultValue": "2020-07-18 00:00:00"
					}
				},
				"variables": {
					"business_date_json": {
						"type": "String"
					},
					"system": {
						"type": "String"
					},
					"location": {
						"type": "String"
					},
					"contextParams": {
						"type": "Array"
					},
					"environment": {
						"type": "String"
					},
					"additionalParams": {
						"type": "Array"
					},
					"sparkEnv": {
						"type": "String"
					},
					"status": {
						"type": "String"
					},
					"failed_stage": {
						"type": "String"
					},
					"stages": {
						"type": "Array"
					}
				},
				"annotations": [],
				"lastPublishTime": "2020-11-19T06:45:44Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PrepareRequestBodyAndInvokeGuzzleBatch_bkp_20201006')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetJobConfig",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select job_id,batch_id,job_name,guzzle_obj_ref,guzzle_job_params,spark_config,run_stage from [dbo].[JBS_GUZZLE_FLOW] where job_id=2",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set Context Params",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "GetJobConfig",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "contextParams",
							"value": {
								"value": "@split(activity('GetJobConfig').output.firstRow['Guzzle_Obj_Ref'], ',')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set System",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set Context Params",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "system",
							"value": {
								"value": "@variables('contextParams')[0]",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set Location",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set Context Params",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "location",
							"value": {
								"value": "@if(equals(length(variables('contextParams')), 2), variables('contextParams')[1], 'NA')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set Environment",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "GetJobConfig",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "environment",
							"value": {
								"value": "@json(split(split(activity('GetJobConfig').output.firstRow['Guzzle_Job_Params'], ',')[0], ':')[1])",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set Additional Params",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "GetJobConfig",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "additionalParams",
							"value": {
								"value": "@skip(split(activity('GetJobConfig').output.firstRow['Guzzle_Job_Params'], ','), 1)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set Spark Env",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "GetJobConfig",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "sparkEnv",
							"value": {
								"value": "@activity('GetJobConfig').output.firstRow['Spark_Config']",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Prepare Business Date Json",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "business_date_json",
							"value": {
								"value": "@if(pipeline().parameters.isMultiBatch, concat('\"businessDateRange\": {\"startDate\": \"${prev_business_ts}\",\"endDate\":\"', pipeline().parameters.datetime, '\"},\"period\":\"', string(pipeline().parameters.period), '\"'), concat('\"businessDate\":\"', pipeline().parameters.datetime, '\"'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Invoke Guzzle Batch",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Prepare Business Date Json",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set Spark Env",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set Additional Params",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set Environment",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set Location",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set System",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "InitializeGuzzleBatchRun",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"initialize_batch_body": {
									"value": "{\"contextParams\":{\"system\":\"@{variables('system')}\" @{if(equals(variables('location'), 'NA'), '', concat(',\"location\":\"', variables('location'), '\"'))}},@{variables('business_date_json')},\"environment\":\"@{variables('environment')}\"}",
									"type": "Expression"
								},
								"run_stage_body": {
									"value": "{\"system\": \"@{variables('system')}\", @{if(equals(variables('location'), 'NA'), '', concat('\"location\":\"', variables('location'), '\",'))} \"guzzle.spark.name\": \"@{variables('sparkEnv')}\", \"stage\": \"@{pipeline().parameters.stage}\", \"environment\":\"@{variables('environment')}\" @{if(greaterOrEquals(length(variables('additionalParams')), 1), concat(',', join(variables('additionalParams'), ',')), '')}}",
									"type": "Expression"
								},
								"business_date": {
									"value": "@pipeline().parameters.datetime",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "GetFailedBatchInfo",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Invoke Guzzle Batch",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select * from [dbo].[batch_control] where batch_status='FAILED' and system='@{variables('system')}' @{if(equals(variables('location'), 'NA'), '', concat('and location', if(equals(variables('location'), 'null'), ' is null', concat('=''', variables('location'), ''''))))}",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "GuzzleDB",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "GetFailedJobInfo",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "GetFailedBatchInfo",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select\n*,\n(select parameter_value from dbo.job_info_param where 1=1 and parameter_name = 'job_status_url' and job_info_param.job_instance_id = job_info.job_instance_id) job_databricks_url,\n(select concat('<<Your blob storage URL>>',parameter_value,'<<Your blob query string>>') from dbo.job_info_param where 1=1 and parameter_name = 'log_file' and job_info_param.job_instance_id = job_info.job_instance_id) job_log_file\nfrom dbo.job_info\nwhere 1=1\nand batch_id='@{activity('GetFailedBatchInfo').output.firstRow['batch_id']}'\nand status in ('FAILED','ABORTED') and tag not in ('workunit', 'publish')\norder by job_info.job_instance_id desc",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "GuzzleDB",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set Stages",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "GetFailedBatchInfo",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "stages",
							"value": {
								"value": "@split(pipeline().parameters.stage, ',')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set Failed Stage",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set Stages",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "failed_stage",
							"value": {
								"value": "@if(equals(activity('GetFailedBatchInfo').output.firstRow[concat(trim(variables('stages')[0]), '_status')], 'FAILED'), trim(variables('stages')[0]), \nif(equals(activity('GetFailedBatchInfo').output.firstRow[concat(trim(variables('stages')[1]), '_status')], 'FAILED'), trim(variables('stages')[1]), trim(variables('stages')[2])))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ErrorNotification",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "GetFailedJobInfo",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set Failed Stage",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotificationPipeline_bkp_20201117",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"emails": {
									"value": "@pipeline().parameters.emails",
									"type": "Expression"
								},
								"pipeline_name": {
									"value": "@pipeline().parameters.parent_pipeline_name",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline().parameters.parent_pipeline_id",
									"type": "Expression"
								},
								"status": "ERROR",
								"business_date": {
									"value": "@trim(replace(pipeline().parameters.datetime, ' 00:00:00', ''))",
									"type": "Expression"
								},
								"start_time": {
									"value": "@pipeline().parameters.datetime",
									"type": "Expression"
								},
								"end_time": {
									"value": "@formatDateTime(utcnow(), 'yyyy-MM-dd HH:mm:ss')",
									"type": "Expression"
								},
								"failure_info": {
									"value": "<div style='padding-left: 12px'>\n<div>Guzzle Batch Context</div>\n<div style='padding-left: 12px'>\n<div>System: @{variables('system')}</div>\n<div>Location: @{variables('location')}</div>\n</div>\n<div>Guzzle Batch Stage: @{variables('failed_stage')}</div>\n<div>Guzzle Job Name: @{activity('GetFailedJobInfo').output.firstRow['name']}</div>\n<div>Batch ID: @{activity('GetFailedBatchInfo').output.firstRow['batch_id']}</div>\n<div>Job Instance ID: @{activity('GetFailedJobInfo').output.firstRow['job_instance_id']}</div>\n<div>Job Log Message: @{activity('GetFailedJobInfo').output.firstRow['message']}</div>\n<div>Guzzle Log URL: @{concat('/guzzle/logs/',activity('GetFailedJobInfo').output.firstRow['job_log_file'])}</div>\n<div>Databricks Log URL: {activity('GetFailedJobInfo').output.firstRow['job_databricks_url']}\n</div>\n</div>",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Raise Exception",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ErrorNotification",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "status",
							"value": {
								"value": "@add(1, 1)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SuccessNotification",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "GetSuccessBatchInfo",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EmailNotificationPipeline_bkp_20201117",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"emails": {
									"value": "@pipeline().parameters.emails",
									"type": "Expression"
								},
								"pipeline_name": {
									"value": "@pipeline().parameters.parent_pipeline_name",
									"type": "Expression"
								},
								"pipeline_id": {
									"value": "@pipeline().parameters.parent_pipeline_id",
									"type": "Expression"
								},
								"status": "SUCCESS",
								"business_date": {
									"value": "@trim(replace(pipeline().parameters.datetime, ' 00:00:00', ''))",
									"type": "Expression"
								},
								"start_time": {
									"value": "@pipeline().parameters.datetime",
									"type": "Expression"
								},
								"end_time": {
									"value": "@formatDateTime(utcnow(), 'yyyy-MM-dd HH:mm:ss')",
									"type": "Expression"
								},
								"failure_info": {
									"value": "<div style='padding-left: 12px'>\n<div>Guzzle Batch Context</div>\n<div>Guzzle Batch Completed Successfuly</div>\n<div style='padding-left: 12px'>\n<div>System: @{variables('system')}</div>\n<div>Location: @{variables('location')}</div>\n</div>\n<div>Batch ID: @{activity('GetSuccessBatchInfo').output.firstRow['batch_id']}</div>\n</div>\n</div>",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "GetSuccessBatchInfo",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Invoke Guzzle Batch",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select * from [dbo].[batch_control] where batch_status in ('WARNING','SUCCESS') and system='@{variables('system')}' @{if(equals(variables('location'), 'NA'), '', concat('and location', if(equals(variables('location'), 'null'), ' is null', concat('=''', variables('location'), ''''))))}",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "GuzzleDB",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "powerbi_refresh",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "SuccessNotification",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PowerBI_DataSet_Refresh",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"Email": {
									"value": "@pipeline().parameters.emails",
									"type": "Expression"
								},
								"Datetime": {
									"value": "@trim(replace(pipeline().parameters.datetime, ' 00:00:00', ''))",
									"type": "Expression"
								}
							}
						}
					}
				],
				"parameters": {
					"job_id": {
						"type": "int",
						"defaultValue": 1
					},
					"datetime": {
						"type": "string",
						"defaultValue": "2020-07-18 00:00:00"
					},
					"isMultiBatch": {
						"type": "bool",
						"defaultValue": false
					},
					"period": {
						"type": "int",
						"defaultValue": 1
					},
					"stage": {
						"type": "string"
					},
					"parent_pipeline_name": {
						"type": "string"
					},
					"parent_pipeline_id": {
						"type": "string"
					},
					"emails": {
						"type": "string",
						"defaultValue": "agnit.chatterjee@justanalytics.com"
					},
					"start_time": {
						"type": "string"
					}
				},
				"variables": {
					"business_date_json": {
						"type": "String"
					},
					"system": {
						"type": "String"
					},
					"location": {
						"type": "String"
					},
					"contextParams": {
						"type": "Array"
					},
					"environment": {
						"type": "String"
					},
					"additionalParams": {
						"type": "Array"
					},
					"sparkEnv": {
						"type": "String"
					},
					"status": {
						"type": "String"
					},
					"failed_stage": {
						"type": "String"
					},
					"stages": {
						"type": "Array"
					}
				},
				"annotations": [],
				"lastPublishTime": "2020-11-17T12:20:49Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/EPSDL_Master_Pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_Oracle_Source_Data",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "move_parquet_files_archive",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "GetTableListAndTriggerCopyData",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Guzzle_Invokation",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Copy_Oracle_Source_Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PrepareRequestBodyAndInvokeGuzzleBatch_bkp_20201006",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"job_id": {
									"value": "@activity('Get_Guzzle_Batch_Details').output.firstRow.job_id",
									"type": "Expression"
								},
								"datetime": {
									"value": "@variables('business_date')",
									"type": "Expression"
								},
								"stage": {
									"value": "@activity('Get_Guzzle_Batch_Details').output.firstRow.run_stage",
									"type": "Expression"
								},
								"emails": {
									"value": "@activity('Get_Email_Details').output.firstRow.email",
									"type": "Expression"
								},
								"start_time": {
									"value": "@variables('business_date')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Business_Date",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "business_date",
							"value": {
								"value": "@formatDateTime(addhours(utcnow(),8),'yyyy-MM-dd HH:mm:ss')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get_Email_Details",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select email from [dbo].[JBS_JOB_EMAILS] where id=1;",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Execute Pipeline1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Copy_Oracle_Source_Data",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Copy_Activity_Failure_Email",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"emails": {
									"value": "@activity('Get_Email_Details').output.firstRow.email",
									"type": "Expression"
								},
								"datetime": {
									"value": "@variables('business_date')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Get_Guzzle_Batch_Details",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select job_id,batch_id,job_name,guzzle_obj_ref,guzzle_job_params,spark_config,run_stage from [dbo].[JBS_GUZZLE_FLOW] where job_id=2",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "move_parquet_files_archive",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Business_Date",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Get_Email_Details",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Get_Guzzle_Batch_Details",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "move_parquet_files_landing_to_archive",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Invoke_Power_BI_refresh",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Guzzle_Invokation",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PowerBI_DataSet_Refresh",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"Email": {
									"value": "@activity('Get_Email_Details').output.firstRow.email",
									"type": "Expression"
								},
								"Datetime": {
									"value": "@variables('business_date')",
									"type": "Expression"
								}
							}
						}
					}
				],
				"variables": {
					"business_date": {
						"type": "String",
						"defaultValue": "1900-01-01 00:00:00"
					}
				},
				"annotations": [],
				"lastPublishTime": "2020-10-06T04:33:40Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PrepareRequestBodyAndInvokeGuzzleBatch_bkp_20201006')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EPSDL_Master_Pipeline_Full_Extract')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Guzzle_Invokation",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Resume_Synapse_Call",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PrepareRequestBodyAndInvokeGuzzleBatch",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"job_id": {
									"value": "@activity('Get_Guzzle_Batch_Details').output.firstRow.job_id",
									"type": "Expression"
								},
								"datetime": {
									"value": "@variables('business_date')",
									"type": "Expression"
								},
								"stage": {
									"value": "@activity('Get_Guzzle_Batch_Details').output.firstRow.run_stage",
									"type": "Expression"
								},
								"parent_pipeline_name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"parent_pipeline_id": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"emails": {
									"value": "@activity('Get_Email_Details').output.firstRow.email",
									"type": "Expression"
								},
								"start_time": {
									"value": "@variables('business_date')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Business_Date",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "business_date",
							"value": {
								"value": "@formatDateTime(addhours(utcnow(),8),'yyyy-MM-dd HH:mm:ss')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get_Email_Details",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select email from [dbo].[JBS_JOB_EMAILS] where id=1;",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Execute Pipeline1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Copy_Oracle_Source_Data",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Copy_Activity_Failure_Email",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"emails": {
									"value": "@activity('Get_Email_Details').output.firstRow.email",
									"type": "Expression"
								},
								"datetime": {
									"value": "@variables('business_date')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Get_Guzzle_Batch_Details",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select job_id,batch_id,job_name,guzzle_obj_ref,guzzle_job_params,spark_config,run_stage from [dbo].[JBS_GUZZLE_FLOW] where job_id=2",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "move_parquet_files_archive",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Business_Date",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Get_Email_Details",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Get_Guzzle_Batch_Details",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "move_parquet_files_landing_to_archive",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Copy_Oracle_Source_Data",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "move_parquet_files_archive",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "GetTableListAndTriggerCopyData",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Resume_Synapse_Call",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "IMOS_Copy",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Resume_Synapse",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Execute Pipeline2",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "move_parquet_files_archive",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Move_File_Archive_Failure_Email",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"emails": {
									"value": "@activity('Get_Email_Details').output.firstRow.email",
									"type": "Expression"
								},
								"datetime": {
									"value": "@variables('business_date')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "IMOS_Copy",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Copy_Oracle_Source_Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Copy_IMOS_Parquet",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Execute Pipeline1_copy1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "IMOS_Copy",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Copy_Activity_Failure_Email",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"emails": {
									"value": "@activity('Get_Email_Details').output.firstRow.email",
									"type": "Expression"
								},
								"datetime": {
									"value": "@variables('business_date')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Pause_Synapse",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Guzzle_Invokation",
								"dependencyConditions": [
									"Succeeded",
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Pause_Synapse",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"variables": {
					"business_date": {
						"type": "String",
						"defaultValue": "1900-01-01 00:00:00"
					}
				},
				"annotations": [],
				"lastPublishTime": "2020-11-17T12:20:48Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PrepareRequestBodyAndInvokeGuzzleBatch')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EPSDL_Master_Pipeline_incremental')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Guzzle_Invokation",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Resume_Synapse_Call",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PrepareRequestBodyAndInvokeGuzzleBatch",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"job_id": {
									"value": "@activity('Get_Guzzle_Batch_Details').output.firstRow.job_id",
									"type": "Expression"
								},
								"datetime": {
									"value": "@variables('business_date')",
									"type": "Expression"
								},
								"stage": {
									"value": "@activity('Get_Guzzle_Batch_Details').output.firstRow.run_stage",
									"type": "Expression"
								},
								"parent_pipeline_name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"parent_pipeline_id": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"emails": {
									"value": "@activity('Get_Email_Details').output.firstRow.email",
									"type": "Expression"
								},
								"start_time": {
									"value": "@variables('business_date')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Business_Date",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "business_date",
							"value": {
								"value": "@formatDateTime(addhours(utcnow(),8),'yyyy-MM-dd HH:mm:ss')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get_Email_Details",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select email from [dbo].[JBS_JOB_EMAILS] where id=1;",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Execute Pipeline1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Copy_Oracle_Source_Data",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Copy_Activity_Failure_Email",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"emails": {
									"value": "@activity('Get_Email_Details').output.firstRow.email",
									"type": "Expression"
								},
								"datetime": {
									"value": "@variables('business_date')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Get_Guzzle_Batch_Details",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select job_id,batch_id,job_name,guzzle_obj_ref,guzzle_job_params,spark_config,run_stage from [dbo].[JBS_GUZZLE_FLOW] where job_id=2",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "move_parquet_files_archive",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Business_Date",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Get_Email_Details",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Get_Guzzle_Batch_Details",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "move_parquet_files_landing_to_archive",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Copy_Oracle_Source_Data",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "move_parquet_files_archive",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "GetTableListAndTriggerCopyData_incremental",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Resume_Synapse_Call",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "IMOS_Copy",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Resume_Synapse",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Execute Pipeline2",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "move_parquet_files_archive",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Move_File_Archive_Failure_Email",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"emails": {
									"value": "@activity('Get_Email_Details').output.firstRow.email",
									"type": "Expression"
								},
								"datetime": {
									"value": "@variables('business_date')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "IMOS_Copy",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Copy_Oracle_Source_Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Copy_IMOS_Parquet",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Execute Pipeline1_copy1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "IMOS_Copy",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Copy_Activity_Failure_Email",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"emails": {
									"value": "@activity('Get_Email_Details').output.firstRow.email",
									"type": "Expression"
								},
								"datetime": {
									"value": "@variables('business_date')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Pause_Synapse",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Guzzle_Invokation",
								"dependencyConditions": [
									"Succeeded",
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Pause_Synapse",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"variables": {
					"business_date": {
						"type": "String",
						"defaultValue": "1900-01-01 00:00:00"
					}
				},
				"annotations": [],
				"lastPublishTime": "2020-10-24T14:21:27Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PrepareRequestBodyAndInvokeGuzzleBatch')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EPSDL_Master_Pipeline_incremental_BKP_20201120_Guzzle2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Guzzle_Invokation",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Resume_Synapse_Call",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PrepareRequestBodyAndInvokeGuzzleBatch",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"job_id": {
									"value": "@activity('Get_Guzzle_Batch_Details').output.firstRow.job_id",
									"type": "Expression"
								},
								"datetime": {
									"value": "@variables('business_date')",
									"type": "Expression"
								},
								"stage": {
									"value": "@activity('Get_Guzzle_Batch_Details').output.firstRow.run_stage",
									"type": "Expression"
								},
								"parent_pipeline_name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"parent_pipeline_id": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"emails": {
									"value": "@activity('Get_Email_Details').output.firstRow.email",
									"type": "Expression"
								},
								"start_time": {
									"value": "@variables('business_date')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Business_Date",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "business_date",
							"value": {
								"value": "@formatDateTime(addhours(utcnow(),8),'yyyy-MM-dd HH:mm:ss')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get_Email_Details",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select email from [dbo].[JBS_JOB_EMAILS] where id=1;",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Execute Pipeline1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Copy_Oracle_Source_Data",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Copy_Activity_Failure_Email",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"emails": {
									"value": "@activity('Get_Email_Details').output.firstRow.email",
									"type": "Expression"
								},
								"datetime": {
									"value": "@variables('business_date')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Get_Guzzle_Batch_Details",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select job_id,batch_id,job_name,guzzle_obj_ref,guzzle_job_params,spark_config,run_stage from [dbo].[JBS_GUZZLE_FLOW] where job_id=2",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "move_parquet_files_archive",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Business_Date",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Get_Email_Details",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Get_Guzzle_Batch_Details",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "move_parquet_files_landing_to_archive",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Copy_Oracle_Source_Data",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "move_parquet_files_archive",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "GetTableListAndTriggerCopyData_incremental",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Resume_Synapse_Call",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "IMOS_Copy",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Resume_Synapse",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Execute Pipeline2",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "move_parquet_files_archive",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Move_File_Archive_Failure_Email",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"emails": {
									"value": "@activity('Get_Email_Details').output.firstRow.email",
									"type": "Expression"
								},
								"datetime": {
									"value": "@variables('business_date')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "IMOS_Copy",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Copy_Oracle_Source_Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Copy_IMOS_Parquet",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Execute Pipeline1_copy1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "IMOS_Copy",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Copy_Activity_Failure_Email",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"emails": {
									"value": "@activity('Get_Email_Details').output.firstRow.email",
									"type": "Expression"
								},
								"datetime": {
									"value": "@variables('business_date')",
									"type": "Expression"
								}
							}
						}
					}
				],
				"variables": {
					"business_date": {
						"type": "String",
						"defaultValue": "1900-01-01 00:00:00"
					}
				},
				"annotations": [],
				"lastPublishTime": "2020-10-24T04:47:28Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PrepareRequestBodyAndInvokeGuzzleBatch')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EPSDL_Master_Pipeline_incremental_IMOS_ADDED')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Guzzle_Invokation",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Resume_Synapse_Call",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PrepareRequestBodyAndInvokeGuzzleBatch",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"job_id": {
									"value": "@activity('Get_Guzzle_Batch_Details').output.firstRow.job_id",
									"type": "Expression"
								},
								"datetime": {
									"value": "@variables('business_date')",
									"type": "Expression"
								},
								"stage": {
									"value": "@activity('Get_Guzzle_Batch_Details').output.firstRow.run_stage",
									"type": "Expression"
								},
								"parent_pipeline_name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"parent_pipeline_id": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"emails": {
									"value": "@activity('Get_Email_Details').output.firstRow.email",
									"type": "Expression"
								},
								"start_time": {
									"value": "@variables('business_date')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Business_Date",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "business_date",
							"value": {
								"value": "@formatDateTime(addhours(utcnow(),8),'yyyy-MM-dd HH:mm:ss')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get_Email_Details",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select email from [dbo].[JBS_JOB_EMAILS] where id=1;",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Execute Pipeline1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Copy_Oracle_Source_Data",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Copy_Activity_Failure_Email",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"emails": {
									"value": "@activity('Get_Email_Details').output.firstRow.email",
									"type": "Expression"
								},
								"datetime": {
									"value": "@variables('business_date')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Get_Guzzle_Batch_Details",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select job_id,batch_id,job_name,guzzle_obj_ref,guzzle_job_params,spark_config,run_stage from [dbo].[JBS_GUZZLE_FLOW] where job_id=2",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "move_parquet_files_archive",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Business_Date",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Get_Email_Details",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Get_Guzzle_Batch_Details",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "move_parquet_files_landing_to_archive",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Copy_Oracle_Source_Data",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "move_parquet_files_archive",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "GetTableListAndTriggerCopyData_incremental",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Resume_Synapse_Call",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "IMOS_Copy",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Resume_Synapse",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Execute Pipeline2",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "move_parquet_files_archive",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Move_File_Archive_Failure_Email",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"emails": {
									"value": "@activity('Get_Email_Details').output.firstRow.email",
									"type": "Expression"
								},
								"datetime": {
									"value": "@variables('business_date')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "IMOS_Copy",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Copy_Oracle_Source_Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Copy_IMOS_Parquet",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Execute Pipeline1_copy1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "IMOS_Copy",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Copy_Activity_Failure_Email",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"emails": {
									"value": "@activity('Get_Email_Details').output.firstRow.email",
									"type": "Expression"
								},
								"datetime": {
									"value": "@variables('business_date')",
									"type": "Expression"
								}
							}
						}
					}
				],
				"variables": {
					"business_date": {
						"type": "String",
						"defaultValue": "1900-01-01 00:00:00"
					}
				},
				"annotations": [],
				"lastPublishTime": "2020-10-24T04:47:29Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PrepareRequestBodyAndInvokeGuzzleBatch')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EPSDL_Master_Pipeline_incremental_bkp20201014')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Guzzle_Invokation",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Resume_Synapse_Call",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PrepareRequestBodyAndInvokeGuzzleBatch",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"job_id": {
									"value": "@activity('Get_Guzzle_Batch_Details').output.firstRow.job_id",
									"type": "Expression"
								},
								"datetime": {
									"value": "@variables('business_date')",
									"type": "Expression"
								},
								"stage": {
									"value": "@activity('Get_Guzzle_Batch_Details').output.firstRow.run_stage",
									"type": "Expression"
								},
								"parent_pipeline_name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"parent_pipeline_id": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"emails": {
									"value": "@activity('Get_Email_Details').output.firstRow.email",
									"type": "Expression"
								},
								"start_time": {
									"value": "@variables('business_date')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Business_Date",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "business_date",
							"value": {
								"value": "@formatDateTime(addhours(utcnow(),8),'yyyy-MM-dd HH:mm:ss')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get_Email_Details",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select email from [dbo].[JBS_JOB_EMAILS] where id=1;",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Execute Pipeline1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Copy_Oracle_Source_Data",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Copy_Activity_Failure_Email",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"emails": {
									"value": "@activity('Get_Email_Details').output.firstRow.email",
									"type": "Expression"
								},
								"datetime": {
									"value": "@variables('business_date')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Get_Guzzle_Batch_Details",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select job_id,batch_id,job_name,guzzle_obj_ref,guzzle_job_params,spark_config,run_stage from [dbo].[JBS_GUZZLE_FLOW] where job_id=2",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "move_parquet_files_archive",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Business_Date",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Get_Email_Details",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Get_Guzzle_Batch_Details",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "move_parquet_files_landing_to_archive",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Copy_Oracle_Source_Data",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "move_parquet_files_archive",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "GetTableListAndTriggerCopyData_incremental",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Resume_Synapse_Call",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Copy_Oracle_Source_Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Resume_Synapse",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Execute Pipeline2",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "move_parquet_files_archive",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Move_File_Archive_Failure_Email",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"emails": {
									"value": "@activity('Get_Email_Details').output.firstRow.email",
									"type": "Expression"
								},
								"datetime": {
									"value": "@variables('business_date')",
									"type": "Expression"
								}
							}
						}
					}
				],
				"variables": {
					"business_date": {
						"type": "String",
						"defaultValue": "1900-01-01 00:00:00"
					}
				},
				"annotations": [],
				"lastPublishTime": "2020-10-14T11:12:51Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PrepareRequestBodyAndInvokeGuzzleBatch')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EPSDL_Master_Pipeline_incremental_bkp_20200610_v2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Guzzle_Invokation",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Resume_Synapse_Call",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PrepareRequestBodyAndInvokeGuzzleBatch",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"job_id": {
									"value": "@activity('Get_Guzzle_Batch_Details').output.firstRow.job_id",
									"type": "Expression"
								},
								"datetime": {
									"value": "@variables('business_date')",
									"type": "Expression"
								},
								"stage": {
									"value": "@activity('Get_Guzzle_Batch_Details').output.firstRow.run_stage",
									"type": "Expression"
								},
								"parent_pipeline_name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"parent_pipeline_id": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"emails": {
									"value": "@activity('Get_Email_Details').output.firstRow.email",
									"type": "Expression"
								},
								"start_time": {
									"value": "@variables('business_date')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Business_Date",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "business_date",
							"value": {
								"value": "@formatDateTime(addhours(utcnow(),8),'yyyy-MM-dd HH:mm:ss')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get_Email_Details",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select email from [dbo].[JBS_JOB_EMAILS] where id=1;",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Execute Pipeline1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Copy_Oracle_Source_Data",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Copy_Activity_Failure_Email",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"emails": {
									"value": "@activity('Get_Email_Details').output.firstRow.email",
									"type": "Expression"
								},
								"datetime": {
									"value": "@variables('business_date')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Get_Guzzle_Batch_Details",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select job_id,batch_id,job_name,guzzle_obj_ref,guzzle_job_params,spark_config,run_stage from [dbo].[JBS_GUZZLE_FLOW] where job_id=2",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "move_parquet_files_archive",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Business_Date",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Get_Email_Details",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Get_Guzzle_Batch_Details",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "move_parquet_files_landing_to_archive",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Copy_Oracle_Source_Data",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "move_parquet_files_archive",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "GetTableListAndTriggerCopyData_incremental",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Resume_Synapse_Call",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Copy_Oracle_Source_Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Resume_Synapse",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Execute Pipeline2",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "move_parquet_files_archive",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Move_File_Archive_Failure_Email",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"emails": {
									"value": "@activity('Get_Email_Details').output.firstRow.email",
									"type": "Expression"
								},
								"datetime": {
									"value": "@variables('business_date')",
									"type": "Expression"
								}
							}
						}
					}
				],
				"variables": {
					"business_date": {
						"type": "String",
						"defaultValue": "1900-01-01 00:00:00"
					}
				},
				"annotations": [],
				"lastPublishTime": "2020-10-06T04:33:40Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PrepareRequestBodyAndInvokeGuzzleBatch')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EPSDL_Master_Pipeline_incremental_bkp_20201006')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Guzzle_Invokation",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Resume_Synapse_Call",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PrepareRequestBodyAndInvokeGuzzleBatch_bkp_20201006",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"job_id": {
									"value": "@activity('Get_Guzzle_Batch_Details').output.firstRow.job_id",
									"type": "Expression"
								},
								"datetime": {
									"value": "@variables('business_date')",
									"type": "Expression"
								},
								"stage": {
									"value": "@activity('Get_Guzzle_Batch_Details').output.firstRow.run_stage",
									"type": "Expression"
								},
								"parent_pipeline_name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"parent_pipeline_id": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"emails": {
									"value": "@activity('Get_Email_Details').output.firstRow.email",
									"type": "Expression"
								},
								"start_time": {
									"value": "@variables('business_date')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Business_Date",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "business_date",
							"value": {
								"value": "@formatDateTime(addhours(utcnow(),8),'yyyy-MM-dd HH:mm:ss')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get_Email_Details",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select email from [dbo].[JBS_JOB_EMAILS] where id=1;",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Execute Pipeline1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Copy_Oracle_Source_Data",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Copy_Activity_Failure_Email",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"emails": {
									"value": "@activity('Get_Email_Details').output.firstRow.email",
									"type": "Expression"
								},
								"datetime": {
									"value": "@variables('business_date')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Get_Guzzle_Batch_Details",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select job_id,batch_id,job_name,guzzle_obj_ref,guzzle_job_params,spark_config,run_stage from [dbo].[JBS_GUZZLE_FLOW] where job_id=2",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "move_parquet_files_archive",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Business_Date",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Get_Email_Details",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Get_Guzzle_Batch_Details",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "move_parquet_files_landing_to_archive",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Copy_Oracle_Source_Data",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "move_parquet_files_archive",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "GetTableListAndTriggerCopyData_incremental",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Resume_Synapse_Call",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Copy_Oracle_Source_Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Resume_Synapse",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Execute Pipeline2",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "move_parquet_files_archive",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Move_File_Archive_Failure_Email",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"emails": {
									"value": "@activity('Get_Email_Details').output.firstRow.email",
									"type": "Expression"
								},
								"datetime": {
									"value": "@variables('business_date')",
									"type": "Expression"
								}
							}
						}
					}
				],
				"variables": {
					"business_date": {
						"type": "String",
						"defaultValue": "1900-01-01 00:00:00"
					}
				},
				"annotations": [],
				"lastPublishTime": "2020-10-06T04:33:40Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PrepareRequestBodyAndInvokeGuzzleBatch_bkp_20201006')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EPSDL_Master_Pipeline_incremental_bkp_20201117')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Guzzle_Invokation",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Resume_Synapse_Call",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PrepareRequestBodyAndInvokeGuzzleBatch",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"job_id": {
									"value": "@activity('Get_Guzzle_Batch_Details').output.firstRow.job_id",
									"type": "Expression"
								},
								"datetime": {
									"value": "@variables('business_date')",
									"type": "Expression"
								},
								"stage": {
									"value": "@activity('Get_Guzzle_Batch_Details').output.firstRow.run_stage",
									"type": "Expression"
								},
								"parent_pipeline_name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"parent_pipeline_id": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"emails": {
									"value": "@activity('Get_Email_Details').output.firstRow.email",
									"type": "Expression"
								},
								"start_time": {
									"value": "@variables('business_date')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Business_Date",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "business_date",
							"value": {
								"value": "@formatDateTime(addhours(utcnow(),8),'yyyy-MM-dd HH:mm:ss')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get_Email_Details",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select email from [dbo].[JBS_JOB_EMAILS] where id=1;",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Execute Pipeline1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Copy_Oracle_Source_Data",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Copy_Activity_Failure_Email",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"emails": {
									"value": "@activity('Get_Email_Details').output.firstRow.email",
									"type": "Expression"
								},
								"datetime": {
									"value": "@variables('business_date')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Get_Guzzle_Batch_Details",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select job_id,batch_id,job_name,guzzle_obj_ref,guzzle_job_params,spark_config,run_stage from [dbo].[JBS_GUZZLE_FLOW] where job_id=2",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "move_parquet_files_archive",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Business_Date",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Get_Email_Details",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Get_Guzzle_Batch_Details",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "move_parquet_files_landing_to_archive",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Copy_Oracle_Source_Data",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "move_parquet_files_archive",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "GetTableListAndTriggerCopyData_incremental",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Resume_Synapse_Call",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "IMOS_Copy",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Resume_Synapse",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Execute Pipeline2",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "move_parquet_files_archive",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Move_File_Archive_Failure_Email",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"emails": {
									"value": "@activity('Get_Email_Details').output.firstRow.email",
									"type": "Expression"
								},
								"datetime": {
									"value": "@variables('business_date')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "IMOS_Copy",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Copy_Oracle_Source_Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Copy_IMOS_Parquet",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Execute Pipeline1_copy1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "IMOS_Copy",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Copy_Activity_Failure_Email",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"emails": {
									"value": "@activity('Get_Email_Details').output.firstRow.email",
									"type": "Expression"
								},
								"datetime": {
									"value": "@variables('business_date')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Pause_Synapse",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Guzzle_Invokation",
								"dependencyConditions": [
									"Succeeded",
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Pause_Synapse",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"variables": {
					"business_date": {
						"type": "String",
						"defaultValue": "1900-01-01 00:00:00"
					}
				},
				"annotations": [],
				"lastPublishTime": "2020-11-17T12:20:49Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PrepareRequestBodyAndInvokeGuzzleBatch')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Incremental_load')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "EPSDL_Master_Pipeline_incremental",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2020-10-21T10:13:00Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								0
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/EPSDL_Master_Pipeline_incremental')]"
			]
		}
	]
}