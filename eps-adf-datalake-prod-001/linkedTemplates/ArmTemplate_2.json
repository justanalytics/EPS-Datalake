{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "eps-adf-datalake-prod-001"
		},
		"FileServer1_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'FileServer1'"
		},
		"Oracle1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'Oracle1'"
		},
		"Oracle_Danaos_Production_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'Oracle_Danaos_Production'"
		},
		"Oracle_datalake_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'Oracle_datalake'"
		},
		"FileServer1_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "203.92.109.65"
		},
		"FileServer1_properties_typeProperties_userId": {
			"type": "string",
			"defaultValue": "vendor1.POC1"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Run_Stage')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "HttpServer1GuzzleService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation",
						"relativeUrl": "api/batches/run_stage?mode=default"
					}
				},
				"schema": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/invokeJob')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "HttpServer1GuzzleService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation",
						"relativeUrl": "/api/execute/job"
					}
				},
				"schema": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/FileServer1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "FileServer",
				"typeProperties": {
					"host": "[parameters('FileServer1_properties_typeProperties_host')]",
					"userId": "[parameters('FileServer1_properties_typeProperties_userId')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('FileServer1_password')]"
					}
				},
				"connectVia": {
					"referenceName": "epsdlselfhostedintegrationruntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Oracle1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "Oracle",
				"typeProperties": {
					"connectionString": "[parameters('Oracle1_connectionString')]"
				},
				"connectVia": {
					"referenceName": "epsdlselfhostedintegrationruntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Oracle_Danaos_Production')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "Oracle",
				"typeProperties": {
					"connectionString": "[parameters('Oracle_Danaos_Production_connectionString')]"
				},
				"connectVia": {
					"referenceName": "epsdlselfhostedintegrationruntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Oracle_datalake')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "Oracle",
				"typeProperties": {
					"connectionString": "[parameters('Oracle_datalake_connectionString')]"
				},
				"connectVia": {
					"referenceName": "epsdlselfhostedintegrationruntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Copy_IMOS_Parquet')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings",
									"skipLineCount": 1
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"type": "Decimal",
											"ordinal": 1
										},
										"sink": {
											"name": "Agreed_Speed",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"type": "Decimal",
											"ordinal": 2
										},
										"sink": {
											"name": "Agreed_Speed_Cons",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"type": "Decimal",
											"ordinal": 3
										},
										"sink": {
											"name": "Agreed_Speed_Engine_Load",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"type": "Decimal",
											"ordinal": 4
										},
										"sink": {
											"name": "Anchorage_Delay",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 5
										},
										"sink": {
											"name": "Arr_Dep_Status",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"type": "DateTime",
											"ordinal": 6
										},
										"sink": {
											"name": "Arrival_Local",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 7
										},
										"sink": {
											"name": "Ballast_Laden_From_Port",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 8
										},
										"sink": {
											"name": "Ballast_Laden_to_Port",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"type": "Decimal",
											"ordinal": 9
										},
										"sink": {
											"name": "Berth_to_Pilot",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 10
										},
										"sink": {
											"name": "Cargo_Inspector",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 11
										},
										"sink": {
											"name": "Cargo_Scheduler",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"type": "Decimal",
											"ordinal": 12
										},
										"sink": {
											"name": "Dem_Des_Days",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"type": "Decimal",
											"ordinal": 13
										},
										"sink": {
											"name": "Dem_Des_Rate",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"type": "DateTime",
											"ordinal": 14
										},
										"sink": {
											"name": "Departure_Local",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"type": "Decimal",
											"ordinal": 15
										},
										"sink": {
											"name": "Est_Cost_Base",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"type": "DateTime",
											"ordinal": 16
										},
										"sink": {
											"name": "Eta_Gmt",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"type": "DateTime",
											"ordinal": 17
										},
										"sink": {
											"name": "ETB",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"type": "DateTime",
											"ordinal": 18
										},
										"sink": {
											"name": "Etd_Gmt",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"type": "Decimal",
											"ordinal": 19
										},
										"sink": {
											"name": "Extra_Port_Days",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"type": "Decimal",
											"ordinal": 20
										},
										"sink": {
											"name": "Extra_Sea_Days",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"type": "Decimal",
											"ordinal": 21
										},
										"sink": {
											"name": "Fixture_No",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"type": "Decimal",
											"ordinal": 22
										},
										"sink": {
											"name": "Idle_Days",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 23
										},
										"sink": {
											"name": "Instructed_SAT_Local",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"type": "Decimal",
											"ordinal": 24
										},
										"sink": {
											"name": "Instructed_Speed",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 25
										},
										"sink": {
											"name": "Is_Current_Port_Call",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"type": "DateTime",
											"ordinal": 26
										},
										"sink": {
											"name": "Last_Update_Gmt",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 27
										},
										"sink": {
											"name": "Last_User_ID",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"type": "Decimal",
											"ordinal": 28
										},
										"sink": {
											"name": "Low_Speed_Days",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"type": "Decimal",
											"ordinal": 29
										},
										"sink": {
											"name": "Low_Speed_Miles",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"type": "Decimal",
											"ordinal": 30
										},
										"sink": {
											"name": "LS_Miles",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"type": "Decimal",
											"ordinal": 31
										},
										"sink": {
											"name": "LS_Port_Days",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"type": "Decimal",
											"ordinal": 32
										},
										"sink": {
											"name": "LS_Sea_Days",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"type": "Decimal",
											"ordinal": 33
										},
										"sink": {
											"name": "Master_Seq",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"type": "Decimal",
											"ordinal": 34
										},
										"sink": {
											"name": "Miles",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"type": "Decimal",
											"ordinal": 35
										},
										"sink": {
											"name": "Order",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"type": "Decimal",
											"ordinal": 36
										},
										"sink": {
											"name": "Pilot_to_Berth",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"type": "Decimal",
											"ordinal": 37
										},
										"sink": {
											"name": "Port_Days",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"type": "Decimal",
											"ordinal": 38
										},
										"sink": {
											"name": "Port_Exp_Amount_Base",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"type": "Decimal",
											"ordinal": 39
										},
										"sink": {
											"name": "Port_Exp_Amount_Local",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 40
										},
										"sink": {
											"name": "Port_Exp_Curr",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"type": "Decimal",
											"ordinal": 41
										},
										"sink": {
											"name": "Port_Exp_Exch_Rate",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 42
										},
										"sink": {
											"name": "Port_Func",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 43
										},
										"sink": {
											"name": "Port_Name",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"type": "Decimal",
											"ordinal": 44
										},
										"sink": {
											"name": "Port_No",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 45
										},
										"sink": {
											"name": "Port_Status_Code",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"type": "Decimal",
											"ordinal": 46
										},
										"sink": {
											"name": "Sea_Days",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"type": "Decimal",
											"ordinal": 47
										},
										"sink": {
											"name": "Seq",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"type": "Decimal",
											"ordinal": 48
										},
										"sink": {
											"name": "Speed_From_Port",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 49
										},
										"sink": {
											"name": "Speed_Instruction_Type",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"type": "Decimal",
											"ordinal": 50
										},
										"sink": {
											"name": "Speed_to_Port",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 51
										},
										"sink": {
											"name": "Vessel_Code",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 52
										},
										"sink": {
											"name": "Via",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"type": "Decimal",
											"ordinal": 53
										},
										"sink": {
											"name": "Voyage_No",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"type": "Decimal",
											"ordinal": 54
										},
										"sink": {
											"name": "Weather_Factor_From_Port",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"type": "Decimal",
											"ordinal": 55
										},
										"sink": {
											"name": "Weather_Factor_to_Port",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 56
										},
										"sink": {
											"name": "Remarks_Fixture",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 57
										},
										"sink": {
											"name": "Remarks_Operations",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 58
										},
										"sink": {
											"name": "UN_Code",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 59
										},
										"sink": {
											"name": "Country",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 60
										},
										"sink": {
											"name": "Area",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 61
										},
										"sink": {
											"name": "Port_Range",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 62
										},
										"sink": {
											"name": "Port_Region",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 63
										},
										"sink": {
											"name": "Low_Sulfur_ECA",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 64
										},
										"sink": {
											"name": "Name",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 65
										},
										"sink": {
											"name": "Latitude"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 66
										},
										"sink": {
											"name": "Longitude"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 67
										},
										"sink": {
											"name": "Latitude_Seconds"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 68
										},
										"sink": {
											"name": "Longitude_Seconds"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "IMOS_Report_Dataset1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Parquet_Single_Copy_IMOS1",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"annotations": [],
				"lastPublishTime": "2020-10-28T03:27:27Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/InsertPowerBIUsageMetrics')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "InsertPowerBIUsageMetrics",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"additionalHeaders": {
									"Authorization": {
										"value": "@pipeline().parameters.Token",
										"type": "Expression"
									}
								},
								"paginationRules": {
									"AbsoluteUrl": "$['continuationUri']"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"sqlWriterStoredProcedureName": {
									"value": "@concat('[',pipeline().parameters.SchemaName,'].[LoadPowerBIRaw]')",
									"type": "Expression"
								},
								"sqlWriterTableType": {
									"value": "@concat('[',pipeline().parameters.SchemaName,'].PowerBIActivityEvent')",
									"type": "Expression"
								},
								"storedProcedureTableTypeParameterName": "RAW_POWERBI_ACTIVITY_LOG",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "[['Activity']"
										},
										"sink": {
											"name": "Activity",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['ActivityId']"
										},
										"sink": {
											"name": "ActivityId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['AggregatedWorkspaceInformation']"
										},
										"sink": {
											"name": "AggregatedWorkspaceInformation",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['AppName']"
										},
										"sink": {
											"name": "AppName",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['AppReportId']"
										},
										"sink": {
											"name": "AppReportId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['ArtifactId']"
										},
										"sink": {
											"name": "ArtifactId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['ArtifactName']"
										},
										"sink": {
											"name": "ArtifactName",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['AuditedArtifactInformation']"
										},
										"sink": {
											"name": "AuditedArtifactInformation",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['ClientIP']"
										},
										"sink": {
											"name": "ClientIP",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['ConsumptionMethod']"
										},
										"sink": {
											"name": "ConsumptionMethod",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['CreationTime']"
										},
										"sink": {
											"name": "CreationTime",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['CustomVisualAccessTokenResourceId']"
										},
										"sink": {
											"name": "CustomVisualAccessTokenResourceId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['CustomVisualAccessTokenSiteUri']"
										},
										"sink": {
											"name": "CustomVisualAccessTokenSiteUri",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['DashboardId']"
										},
										"sink": {
											"name": "DashboardId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['DashboardName']"
										},
										"sink": {
											"name": "DashboardName",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['DataConnectivityMode']"
										},
										"sink": {
											"name": "DataConnectivityMode",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['DataflowId']"
										},
										"sink": {
											"name": "DataflowId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['DataflowName']"
										},
										"sink": {
											"name": "DataflowName",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['DataflowType']"
										},
										"sink": {
											"name": "DataflowType",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['DatasetId']"
										},
										"sink": {
											"name": "DatasetId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['DatasetName']"
										},
										"sink": {
											"name": "DatasetName",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['Datasets']"
										},
										"sink": {
											"name": "Datasets",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['Datasources']"
										},
										"sink": {
											"name": "Datasources",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['DistributionMethod']"
										},
										"sink": {
											"name": "DistributionMethod",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['ExportEventEndDateTimeParameter']"
										},
										"sink": {
											"name": "ExportEventEndDateTimeParameter",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['ExportEventStartDateTimeParameter']"
										},
										"sink": {
											"name": "ExportEventStartDateTimeParameter",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['ExportedArtifactInfo']"
										},
										"sink": {
											"name": "ExportedArtifactInfo",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['FolderDisplayName']"
										},
										"sink": {
											"name": "FolderDisplayName",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['FolderObjectId']"
										},
										"sink": {
											"name": "FolderObjectId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['GatewayId']"
										},
										"sink": {
											"name": "GatewayId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['GatewayName']"
										},
										"sink": {
											"name": "GatewayName",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['GatewayType']"
										},
										"sink": {
											"name": "GatewayType",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['Id']"
										},
										"sink": {
											"name": "Id",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['ImportDisplayName']"
										},
										"sink": {
											"name": "ImportDisplayName",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['ImportId']"
										},
										"sink": {
											"name": "ImportId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['ImportSource']"
										},
										"sink": {
											"name": "ImportSource",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['ImportType']"
										},
										"sink": {
											"name": "ImportType",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['IsSuccess']"
										},
										"sink": {
											"name": "IsSuccess",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['IsUpdateAppActivity']"
										},
										"sink": {
											"name": "IsUpdateAppActivity",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['ItemName']"
										},
										"sink": {
											"name": "ItemName",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['MentionedUsersInformation']"
										},
										"sink": {
											"name": "MentionedUsersInformation",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['ObjectId']"
										},
										"sink": {
											"name": "ObjectId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['Operation']"
										},
										"sink": {
											"name": "Operation",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['OrgAppPermission']"
										},
										"sink": {
											"name": "OrgAppPermission",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['OrganizationId']"
										},
										"sink": {
											"name": "OrganizationId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['RecordType']"
										},
										"sink": {
											"name": "RecordType",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['RefreshType']"
										},
										"sink": {
											"name": "RefreshType",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['ReportId']"
										},
										"sink": {
											"name": "ReportId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['ReportName']"
										},
										"sink": {
											"name": "ReportName",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['ReportType']"
										},
										"sink": {
											"name": "ReportType",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['RequestId']"
										},
										"sink": {
											"name": "RequestId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['SharingInformation']"
										},
										"sink": {
											"name": "SharingInformation",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['SwitchState']"
										},
										"sink": {
											"name": "SwitchState",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['TakingOverOwner']"
										},
										"sink": {
											"name": "TakingOverOwner",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['TemplateAppFolderObjectId']"
										},
										"sink": {
											"name": "TemplateAppFolderObjectId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['TemplateAppObjectId']"
										},
										"sink": {
											"name": "TemplateAppObjectId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['TemplateAppOwnerTenantObjectId']"
										},
										"sink": {
											"name": "TemplateAppOwnerTenantObjectId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['TemplateAppVersion']"
										},
										"sink": {
											"name": "TemplateAppVersion",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['TemplatePackageName']"
										},
										"sink": {
											"name": "TemplatePackageName",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['UserAgent']"
										},
										"sink": {
											"name": "UserAgent",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['UserId']"
										},
										"sink": {
											"name": "UserId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['UserKey']"
										},
										"sink": {
											"name": "UserKey",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['UserType']"
										},
										"sink": {
											"name": "UserType",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['WorkSpaceName']"
										},
										"sink": {
											"name": "WorkSpaceName",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['Workload']"
										},
										"sink": {
											"name": "Workload",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['WorkspaceId']"
										},
										"sink": {
											"name": "WorkspaceId",
											"type": "String"
										}
									}
								],
								"collectionReference": "$['activityEventEntities']",
								"mapComplexValuesToString": true
							}
						},
						"inputs": [
							{
								"referenceName": "Power_Bi_Admin",
								"type": "DatasetReference",
								"parameters": {
									"api": "activityevents",
									"params": {
										"value": "@concat('startDateTime=''',pipeline().parameters.StartDateTime,'''&endDateTime=''',pipeline().parameters.EndDateTime,'''')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "PowerBI_SQL_DB",
								"type": "DatasetReference",
								"parameters": {
									"TableName": {
										"value": "@concat('[',pipeline().parameters.SchemaName,'].PowerBIActivityEvent')",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"parameters": {
					"StartDateTime": {
						"type": "string"
					},
					"EndDateTime": {
						"type": "string"
					},
					"Token": {
						"type": "string"
					},
					"SchemaName": {
						"type": "string",
						"defaultValue": "pbtest"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/TrackGuzzleStageRun')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "WaitUntilStageFinish",
						"type": "Until",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@if(variables('statusChangedToRunning'), not(equals(activity('GetStageStatus').output.firstRow[pipeline().parameters.stage], 'RUNNING')), or(or(equals(activity('GetStageStatus').output.firstRow[pipeline().parameters.stage], 'SUCCESS'), equals(activity('GetStageStatus').output.firstRow[pipeline().parameters.stage], 'WARNING')), or(equals(activity('GetStageStatus').output.firstRow[pipeline().parameters.stage], 'FAILED'), equals(activity('GetStageStatus').output.firstRow[pipeline().parameters.stage], 'ABORTED'))))",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Wait2minutes",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 120
									}
								},
								{
									"name": "GetStageStatus",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Wait2minutes",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "select @{pipeline().parameters.stage} from dbo.batch_control where batch_id=@{pipeline().parameters.batch_id}",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "GuzzleDB",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "If Status Changed To RUNNING",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "GetStageStatus",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@and(not(variables('statusChangedToRunning')), equals(activity('GetStageStatus').output.firstRow[pipeline().parameters.stage], 'RUNNING'))",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Set status changed to RUNNING",
												"type": "SetVariable",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"variableName": "statusChangedToRunning",
													"value": true
												}
											}
										]
									}
								}
							],
							"timeout": "0.04:00:00"
						}
					},
					{
						"name": "RaiseExceptionIfFailed",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "WaitUntilStageFinish",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "status",
							"value": {
								"value": "@if(or(equals(activity('GetStageStatus').output.firstRow[pipeline().parameters.stage], 'SUCCESS'), equals(activity('GetStageStatus').output.firstRow[pipeline().parameters.stage], 'WARNING')), 'SUCCESS', 1)",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"stage": {
						"type": "string"
					},
					"batch_id": {
						"type": "string"
					}
				},
				"variables": {
					"status": {
						"type": "String"
					},
					"statusChangedToRunning": {
						"type": "Boolean"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "POST",
									"additionalHeaders": "Content-Type: application/json",
									"requestBody": "{\n  \"name\": \"csv_demo\",\n  \"jobParameters\": {\n    \"system\": \"EPStest\",\n    \"business_date\": \"2020-09-27 18:31:10\",\n    \"guzzle.spark.name\": \"guzzle_databricks_cluster\",\n    \"environment\": \"test\"\n  }\n}",
									"requestTimeout": ""
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "invokeJob",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/invokeJob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "POST",
									"additionalHeaders": "Content-Type: application/json",
									"requestBody": "{\n  \"name\": \"jb_data_sync_hardcoded\",\n  \"jobParameters\": {\n    \"system\": \"EPStest\",\n    \"business_date\": \"2020-06-23 18:31:10\",\n    \"guzzle.spark.name\": \"guzzle_databricks_cluster\",\n    \"environment\": \"test\"\n  }\n}",
									"requestTimeout": ""
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "Json1",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/OracleTable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Oracle1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "OracleTable",
				"schema": [],
				"typeProperties": {
					"schema": "TANKPAC",
					"table": "SUPPLIER_INVOICING"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Oracle1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OracleTable_Single_Use')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Oracle1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "OracleTable",
				"schema": [],
				"typeProperties": {
					"schema": "DANAOS",
					"table": "BP_PORTS"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Oracle1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OracleTable_Single_Use_AGNIT_TESTING')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Oracle1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "OracleTable",
				"schema": [],
				"typeProperties": {
					"schema": "BIUSER1",
					"table": "VW_VESSEL_DRY_DOCK_DETAILS"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Oracle1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Oracle_Data_Lake_Tables')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Oracle_datalake",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "OracleTable",
				"schema": [],
				"typeProperties": {
					"schema": "EBI_UAT",
					"table": "REQUISITIONS_CATEGORY"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Oracle_datalake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Oracle_danaos_production')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Oracle_Danaos_Production",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "OracleTable",
				"schema": [],
				"typeProperties": {
					"schema": "TANKPAC",
					"table": "REQUISITIONS"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Oracle_Danaos_Production')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/IterateAndCopySQLTables')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "IterateSQLTables",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.tableList",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 3,
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.02:00:00",
										"retry": 2,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "OracleSource",
											"oracleReaderQuery": {
												"value": "SELECT * FROM @{item().tablename}",
												"type": "Expression"
											},
											"partitionOption": "None",
											"queryTimeout": "02:00:00"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings",
												"maxConcurrentConnections": 10
											}
										},
										"enableStaging": false,
										"parallelCopies": 4,
										"enableSkipIncompatibleRow": true,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false,
												"dateTimeFormat": "dd-MMM-yy"
											}
										}
									},
									"inputs": [
										{
											"referenceName": "Oracle_danaos_production",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "Parquet1",
											"type": "DatasetReference",
											"parameters": {
												"filename": {
													"value": "@item().filename",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"parameters": {
					"tableList": {
						"type": "array"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Oracle_danaos_production')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/IterateAndCopySQLTables_incremental')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "IterateSQLTables",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.tableList",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 3,
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.02:00:00",
										"retry": 2,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "OracleSource",
											"oracleReaderQuery": {
												"value": "@{item().tablename}",
												"type": "Expression"
											},
											"partitionOption": "None",
											"queryTimeout": "02:00:00"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings",
												"maxConcurrentConnections": 10
											}
										},
										"enableStaging": false,
										"parallelCopies": 4,
										"enableSkipIncompatibleRow": true,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false,
												"dateTimeFormat": "dd-MMM-yy"
											}
										}
									},
									"inputs": [
										{
											"referenceName": "Oracle_danaos_production",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "Parquet1",
											"type": "DatasetReference",
											"parameters": {
												"filename": {
													"value": "@item().filename",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"parameters": {
					"tableList": {
						"type": "array"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Oracle_danaos_production')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Power Bi Usage Metric Update')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Oauth2 Login",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@concat('https://login.microsoftonline.com/',pipeline().parameters.TenantId,'/oauth2/token')",
								"type": "Expression"
							},
							"method": "POST",
							"headers": {
								"Content-Type": "application/x-www-form-urlencoded"
							},
							"body": {
								"value": "@concat('grant_type=password&scope=openid&resource=https://analysis.windows.net/powerbi/api&client_id=',pipeline().parameters.SPClientId,'&client_secret=',encodeUriComponent(pipeline().parameters.SPSecret),'&username=',pipeline().parameters.UserName,'&password=',encodeUriComponent(pipeline().parameters.Password))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Last Value Look Up",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": {
									"value": "@concat('[',pipeline().parameters.SchemaName,'].[DeterminePBLastUsageQueryTime]')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"isolationLevel": "ReadUncommitted",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "PowerBI_SQL_DB",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "aaaaaa"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Last Value Look Up",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Oauth2 Login",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Last Value Look Up').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Insert Usage Metrics",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "InsertPowerBIUsageMetrics",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"StartDateTime": {
												"value": "@item().StartDateTime",
												"type": "Expression"
											},
											"EndDateTime": {
												"value": "@item().EndDateTime",
												"type": "Expression"
											},
											"Token": {
												"value": "@concat(string(activity('Oauth2 Login').output.token_type),' ',string(activity('Oauth2 Login').output.access_token))",
												"type": "Expression"
											},
											"SchemaName": {
												"value": "@pipeline().parameters.SchemaName",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Drop Duplicate Data",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "@concat('[',pipeline().parameters.SchemaName,'].[DropDuplicateRawPowerBIStaging]')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Transform",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Drop Duplicate Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "@concat('[',pipeline().parameters.SchemaName,'].[TransformPBStagingToFact]')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Staging To Raw",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Transform",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "@concat('[',pipeline().parameters.SchemaName,'].[PowerBIStagingToRaw]')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Clear Staging",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Staging To Raw",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('TRUNCATE TABLE [',pipeline().parameters.SchemaName,'].RAW_POWERBI_ACTIVITY_LOG_STAGING;\nSELECT 1 as res;')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "PowerBI_SQL_DB",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Test.RAW_POWERBI_ACTIVITY_LOG_STAGING"
								}
							}
						}
					}
				],
				"parameters": {
					"TenantId": {
						"type": "String",
						"defaultValue": "cc3f0441-9868-4f81-a6f2-6d91c68fe354"
					},
					"SPClientId": {
						"type": "String",
						"defaultValue": "70ac25e2-0500-4b93-affa-583ef8b28d5a"
					},
					"SPSecret": {
						"type": "String",
						"defaultValue": "3NYx_dDlH~_KkC_XwA24-5M4OiFyR5xM9H"
					},
					"UserName": {
						"type": "string",
						"defaultValue": "thao.nguyen@justanalytics.com"
					},
					"Password": {
						"type": "string",
						"defaultValue": "Nplt@June"
					},
					"SchemaName": {
						"type": "string",
						"defaultValue": "dbo"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/InsertPowerBIUsageMetrics')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TrackGuzzleBatchRun')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "WaitForAllStagesToFinish",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.stages",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "If Condition1",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@not(variables('failureFlag'))",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "WaitUntilStageFinished",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "TrackGuzzleStageRun",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"stage": {
															"value": "@concat(trim(item()), '_status')",
															"type": "Expression"
														},
														"batch_id": {
															"value": "@pipeline().parameters.batch_id",
															"type": "Expression"
														}
													}
												}
											},
											{
												"name": "Set Failure Flag",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "WaitUntilStageFinished",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"variableName": "failureFlag",
													"value": true
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "RaiseExceptionIfFailure",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "WaitForAllStagesToFinish",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "status",
							"value": {
								"value": "@if(variables('failureFlag'), 1, 'SUCCESS')",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"batch_id": {
						"type": "string"
					},
					"stages": {
						"type": "array"
					}
				},
				"variables": {
					"failureFlag": {
						"type": "Boolean"
					},
					"status": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/TrackGuzzleStageRun')]"
			]
		}
	]
}