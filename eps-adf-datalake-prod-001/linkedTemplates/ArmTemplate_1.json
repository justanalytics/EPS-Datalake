{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "eps-adf-datalake-prod-001"
		},
		"FileServer1_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'FileServer1'"
		},
		"Oracle1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'Oracle1'"
		},
		"Oracle_Danaos_Production_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'Oracle_Danaos_Production'"
		},
		"Oracle_datalake_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'Oracle_datalake'"
		},
		"FileServer1_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "203.92.109.65"
		},
		"FileServer1_properties_typeProperties_userId": {
			"type": "string",
			"defaultValue": "vendor1.POC1"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/GuzzleDB')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Initialize_Batch')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "HttpServer1GuzzleService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation",
						"relativeUrl": "/api/batches/initialize?mode=default"
					}
				},
				"schema": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "HttpServer1GuzzleService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation",
						"relativeUrl": "/api/execute/job"
					}
				},
				"schema": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Parquet1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@concat(dataset().filename,'_',formatDateTime(addhours(utcnow(),8),'yyyyMMdd'),'_000000.parquet')",
							"type": "Expression"
						},
						"folderPath": "epsdl/data/landing/",
						"container": "epsdlcontainer"
					},
					"compressionCodec": "none"
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Parquet_DataLake_Tables_Data')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@concat('requisitions_category','.parquet')",
							"type": "Expression"
						},
						"folderPath": "epsdl/data/landing",
						"container": "epsdlcontainer"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Parquet_Single_Copy')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@concat('bp_ports_',formatDateTime(addhours(utcnow(),8),'yyyyMMdd'),'_000000.parquet')",
							"type": "Expression"
						},
						"folderPath": "epsdl/data/landing",
						"container": "epsdlcontainer"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "COMPANY",
						"type": "UTF8"
					},
					{
						"name": "SHORT_NAME",
						"type": "UTF8"
					},
					{
						"name": "NAME",
						"type": "UTF8"
					},
					{
						"name": "MANAGED_BY",
						"type": "UTF8"
					},
					{
						"name": "COMPANY_GROUP",
						"type": "UTF8"
					},
					{
						"name": "CHART",
						"type": "UTF8"
					},
					{
						"name": "COMPANY_TYPE",
						"type": "UTF8"
					},
					{
						"name": "BASE_CURRENCY",
						"type": "UTF8"
					},
					{
						"name": "REMARKS",
						"type": "UTF8"
					},
					{
						"name": "GROUP_FLAG_1",
						"type": "UTF8"
					},
					{
						"name": "GROUP_FLAG_2",
						"type": "UTF8"
					},
					{
						"name": "OFFICIAL_CURRENCY",
						"type": "UTF8"
					},
					{
						"name": "GLOBAL_VESSEL_ID",
						"type": "UTF8"
					},
					{
						"name": "CREATE_INTERCOMPANIES",
						"type": "UTF8"
					},
					{
						"name": "IS_FILING",
						"type": "UTF8"
					},
					{
						"name": "ACTIVE_FLAG",
						"type": "UTF8"
					},
					{
						"name": "COMPANY_LEVEL",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "BANK_LEDGER",
						"type": "UTF8"
					},
					{
						"name": "GROUP_DETAILS_FROM",
						"type": "INT96"
					},
					{
						"name": "GROUP_DETAILS_TO",
						"type": "INT96"
					},
					{
						"name": "TONNAGE_TAX_FROM",
						"type": "INT96"
					},
					{
						"name": "TONNAGE_TAX_TO",
						"type": "INT96"
					},
					{
						"name": "VAT_GROUP_FROM",
						"type": "INT96"
					},
					{
						"name": "VAT_GROUP_TO",
						"type": "INT96"
					},
					{
						"name": "INCEXP_MANAGED_BY",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Parquet_Single_Copy_AGNIT_TESTING')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@concat('supply_items_',formatDateTime(addhours(utcnow(),8),'yyyyMMdd'),'_000000.parquet')",
							"type": "Expression"
						},
						"folderPath": "epsdl/data/landing",
						"container": "epsdlcontainer"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "COMPANY",
						"type": "UTF8"
					},
					{
						"name": "SHORT_NAME",
						"type": "UTF8"
					},
					{
						"name": "NAME",
						"type": "UTF8"
					},
					{
						"name": "MANAGED_BY",
						"type": "UTF8"
					},
					{
						"name": "COMPANY_GROUP",
						"type": "UTF8"
					},
					{
						"name": "CHART",
						"type": "UTF8"
					},
					{
						"name": "COMPANY_TYPE",
						"type": "UTF8"
					},
					{
						"name": "BASE_CURRENCY",
						"type": "UTF8"
					},
					{
						"name": "REMARKS",
						"type": "UTF8"
					},
					{
						"name": "GROUP_FLAG_1",
						"type": "UTF8"
					},
					{
						"name": "GROUP_FLAG_2",
						"type": "UTF8"
					},
					{
						"name": "OFFICIAL_CURRENCY",
						"type": "UTF8"
					},
					{
						"name": "GLOBAL_VESSEL_ID",
						"type": "UTF8"
					},
					{
						"name": "CREATE_INTERCOMPANIES",
						"type": "UTF8"
					},
					{
						"name": "IS_FILING",
						"type": "UTF8"
					},
					{
						"name": "ACTIVE_FLAG",
						"type": "UTF8"
					},
					{
						"name": "COMPANY_LEVEL",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "BANK_LEDGER",
						"type": "UTF8"
					},
					{
						"name": "GROUP_DETAILS_FROM",
						"type": "INT96"
					},
					{
						"name": "GROUP_DETAILS_TO",
						"type": "INT96"
					},
					{
						"name": "TONNAGE_TAX_FROM",
						"type": "INT96"
					},
					{
						"name": "TONNAGE_TAX_TO",
						"type": "INT96"
					},
					{
						"name": "VAT_GROUP_FROM",
						"type": "INT96"
					},
					{
						"name": "VAT_GROUP_TO",
						"type": "INT96"
					},
					{
						"name": "INCEXP_MANAGED_BY",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Parquet_production')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@concat('requisitions','.parquet')",
							"type": "Expression"
						},
						"folderPath": "epsdl/data/landing/",
						"container": "epsdlcontainer"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PowerBI_SQL_DB')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"TableName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"tableName": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Power_Bi_Admin')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "RestService1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"api": {
						"type": "string",
						"defaultValue": "activityevents"
					},
					"params": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": {
						"value": "@concat('v1.0/myorg/admin/', dataset().api, '?', dataset().params)",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Run_Stage')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "HttpServer1GuzzleService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation",
						"relativeUrl": "api/batches/run_stage?mode=default"
					}
				},
				"schema": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/invokeJob')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "HttpServer1GuzzleService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation",
						"relativeUrl": "/api/execute/job"
					}
				},
				"schema": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/FileServer1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "FileServer",
				"typeProperties": {
					"host": "[parameters('FileServer1_properties_typeProperties_host')]",
					"userId": "[parameters('FileServer1_properties_typeProperties_userId')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('FileServer1_password')]"
					}
				},
				"connectVia": {
					"referenceName": "epsdlselfhostedintegrationruntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Oracle1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "Oracle",
				"typeProperties": {
					"connectionString": "[parameters('Oracle1_connectionString')]"
				},
				"connectVia": {
					"referenceName": "epsdlselfhostedintegrationruntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Oracle_Danaos_Production')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "Oracle",
				"typeProperties": {
					"connectionString": "[parameters('Oracle_Danaos_Production_connectionString')]"
				},
				"connectVia": {
					"referenceName": "epsdlselfhostedintegrationruntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Oracle_datalake')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "Oracle",
				"typeProperties": {
					"connectionString": "[parameters('Oracle_datalake_connectionString')]"
				},
				"connectVia": {
					"referenceName": "epsdlselfhostedintegrationruntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PowerBI_DataSet_Refresh_Rejection')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Oauth2 Login",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@concat('https://login.microsoftonline.com/',pipeline().parameters.TenantId,'/oauth2/token')",
								"type": "Expression"
							},
							"method": "POST",
							"headers": {
								"Content-Type": "application/x-www-form-urlencoded"
							},
							"body": {
								"value": "@concat('grant_type=client_credentials&resource=https://analysis.windows.net/powerbi/api&client_id=',pipeline().parameters.SPClientId,'&client_secret=',encodeUriComponent(pipeline().parameters.SPSecret))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Call Dataset Refresh",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Oauth2 Login",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@concat('https://api.powerbi.com/v1.0/myorg/groups/',pipeline().parameters.PBIAppWorkspaceId,'/datasets/',pipeline().parameters.PBIDatasetId,'/refreshes')",
								"type": "Expression"
							},
							"method": "POST",
							"headers": {
								"Authorization": {
									"value": "@concat(string(activity('Oauth2 Login').output.token_type),' ',string(activity('Oauth2 Login').output.access_token))",
									"type": "Expression"
								}
							},
							"body": {
								"helloww": "worldddd"
							}
						}
					},
					{
						"name": "Until Refresh Complete",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "Call Dataset Refresh",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@not(equals('Unknown',variables('RefreshStatus')))",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Wait1",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 30
									}
								},
								{
									"name": "Get Dataset Refresh Status",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Wait1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": {
											"value": "@concat('https://api.powerbi.com/v1.0/myorg/groups/',pipeline().parameters.PBIAppWorkspaceId,'/datasets/',pipeline().parameters.PBIDatasetId,'/refreshes?$top=1')",
											"type": "Expression"
										},
										"method": "GET",
										"headers": {
											"Authorization": {
												"value": "@concat(string(activity('Oauth2 Login').output.token_type),' ',string(activity('Oauth2 Login').output.access_token))",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Set RefreshStatus",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Get Dataset Refresh Status",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "RefreshStatus",
										"value": {
											"value": "@activity('Get Dataset Refresh Status').output.value[0].status",
											"type": "Expression"
										}
									}
								}
							],
							"timeout": "7.00:00:00"
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Until Refresh Complete",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(variables('RefreshStatus'),'Completed')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Execute Pipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PowerBI_Refresh_Failure_Email",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"emails": {
												"value": "@pipeline().parameters.Email",
												"type": "Expression"
											},
											"datetime": {
												"value": "@pipeline().parameters.Datetime",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "RaiseException",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Execute Pipeline1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "RefreshStatus",
										"value": {
											"value": "@add(1, 1)",
											"type": "Expression"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "PowerBI_Refresh_Success_Email_Call",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PowerBI_Refresh_Success_Email",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"emails": {
												"value": "@pipeline().parameters.Email",
												"type": "Expression"
											},
											"datetime": {
												"value": "@pipeline().parameters.Datetime",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"TenantId": {
						"type": "String",
						"defaultValue": "cc3f0441-9868-4f81-a6f2-6d91c68fe354"
					},
					"SPClientId": {
						"type": "String",
						"defaultValue": "f2128599-61e0-4ec8-aa6d-de904319802d"
					},
					"SPSecret": {
						"type": "String",
						"defaultValue": "7qLOQ8e956yGNvpbHwf.E.LoFu_~KA527X"
					},
					"PBIAppWorkspaceId": {
						"type": "string",
						"defaultValue": "2298a4ea-fa0e-4ec8-9807-6d7f1dd5a881"
					},
					"PBIDatasetId": {
						"type": "string",
						"defaultValue": "9e6945e1-78fa-49f3-bf48-b63ec5b8e6f4"
					},
					"Email": {
						"type": "string",
						"defaultValue": "agnit.chatterjee@justanalytics.com"
					},
					"Datetime": {
						"type": "string"
					}
				},
				"variables": {
					"RefreshStatus": {
						"type": "String",
						"defaultValue": "Unknown"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/InsertPowerBIUsageMetrics')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "InsertPowerBIUsageMetrics",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"additionalHeaders": {
									"Authorization": {
										"value": "@pipeline().parameters.Token",
										"type": "Expression"
									}
								},
								"paginationRules": {
									"AbsoluteUrl": "$['continuationUri']"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"sqlWriterStoredProcedureName": {
									"value": "@concat('[',pipeline().parameters.SchemaName,'].[LoadPowerBIRaw]')",
									"type": "Expression"
								},
								"sqlWriterTableType": {
									"value": "@concat('[',pipeline().parameters.SchemaName,'].PowerBIActivityEvent')",
									"type": "Expression"
								},
								"storedProcedureTableTypeParameterName": "RAW_POWERBI_ACTIVITY_LOG",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "[['Activity']"
										},
										"sink": {
											"name": "Activity",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['ActivityId']"
										},
										"sink": {
											"name": "ActivityId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['AggregatedWorkspaceInformation']"
										},
										"sink": {
											"name": "AggregatedWorkspaceInformation",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['AppName']"
										},
										"sink": {
											"name": "AppName",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['AppReportId']"
										},
										"sink": {
											"name": "AppReportId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['ArtifactId']"
										},
										"sink": {
											"name": "ArtifactId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['ArtifactName']"
										},
										"sink": {
											"name": "ArtifactName",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['AuditedArtifactInformation']"
										},
										"sink": {
											"name": "AuditedArtifactInformation",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['ClientIP']"
										},
										"sink": {
											"name": "ClientIP",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['ConsumptionMethod']"
										},
										"sink": {
											"name": "ConsumptionMethod",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['CreationTime']"
										},
										"sink": {
											"name": "CreationTime",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['CustomVisualAccessTokenResourceId']"
										},
										"sink": {
											"name": "CustomVisualAccessTokenResourceId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['CustomVisualAccessTokenSiteUri']"
										},
										"sink": {
											"name": "CustomVisualAccessTokenSiteUri",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['DashboardId']"
										},
										"sink": {
											"name": "DashboardId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['DashboardName']"
										},
										"sink": {
											"name": "DashboardName",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['DataConnectivityMode']"
										},
										"sink": {
											"name": "DataConnectivityMode",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['DataflowId']"
										},
										"sink": {
											"name": "DataflowId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['DataflowName']"
										},
										"sink": {
											"name": "DataflowName",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['DataflowType']"
										},
										"sink": {
											"name": "DataflowType",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['DatasetId']"
										},
										"sink": {
											"name": "DatasetId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['DatasetName']"
										},
										"sink": {
											"name": "DatasetName",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['Datasets']"
										},
										"sink": {
											"name": "Datasets",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['Datasources']"
										},
										"sink": {
											"name": "Datasources",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['DistributionMethod']"
										},
										"sink": {
											"name": "DistributionMethod",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['ExportEventEndDateTimeParameter']"
										},
										"sink": {
											"name": "ExportEventEndDateTimeParameter",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['ExportEventStartDateTimeParameter']"
										},
										"sink": {
											"name": "ExportEventStartDateTimeParameter",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['ExportedArtifactInfo']"
										},
										"sink": {
											"name": "ExportedArtifactInfo",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['FolderDisplayName']"
										},
										"sink": {
											"name": "FolderDisplayName",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['FolderObjectId']"
										},
										"sink": {
											"name": "FolderObjectId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['GatewayId']"
										},
										"sink": {
											"name": "GatewayId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['GatewayName']"
										},
										"sink": {
											"name": "GatewayName",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['GatewayType']"
										},
										"sink": {
											"name": "GatewayType",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['Id']"
										},
										"sink": {
											"name": "Id",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['ImportDisplayName']"
										},
										"sink": {
											"name": "ImportDisplayName",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['ImportId']"
										},
										"sink": {
											"name": "ImportId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['ImportSource']"
										},
										"sink": {
											"name": "ImportSource",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['ImportType']"
										},
										"sink": {
											"name": "ImportType",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['IsSuccess']"
										},
										"sink": {
											"name": "IsSuccess",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['IsUpdateAppActivity']"
										},
										"sink": {
											"name": "IsUpdateAppActivity",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['ItemName']"
										},
										"sink": {
											"name": "ItemName",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['MentionedUsersInformation']"
										},
										"sink": {
											"name": "MentionedUsersInformation",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['ObjectId']"
										},
										"sink": {
											"name": "ObjectId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['Operation']"
										},
										"sink": {
											"name": "Operation",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['OrgAppPermission']"
										},
										"sink": {
											"name": "OrgAppPermission",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['OrganizationId']"
										},
										"sink": {
											"name": "OrganizationId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['RecordType']"
										},
										"sink": {
											"name": "RecordType",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['RefreshType']"
										},
										"sink": {
											"name": "RefreshType",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['ReportId']"
										},
										"sink": {
											"name": "ReportId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['ReportName']"
										},
										"sink": {
											"name": "ReportName",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['ReportType']"
										},
										"sink": {
											"name": "ReportType",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['RequestId']"
										},
										"sink": {
											"name": "RequestId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['SharingInformation']"
										},
										"sink": {
											"name": "SharingInformation",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['SwitchState']"
										},
										"sink": {
											"name": "SwitchState",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['TakingOverOwner']"
										},
										"sink": {
											"name": "TakingOverOwner",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['TemplateAppFolderObjectId']"
										},
										"sink": {
											"name": "TemplateAppFolderObjectId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['TemplateAppObjectId']"
										},
										"sink": {
											"name": "TemplateAppObjectId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['TemplateAppOwnerTenantObjectId']"
										},
										"sink": {
											"name": "TemplateAppOwnerTenantObjectId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['TemplateAppVersion']"
										},
										"sink": {
											"name": "TemplateAppVersion",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['TemplatePackageName']"
										},
										"sink": {
											"name": "TemplatePackageName",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['UserAgent']"
										},
										"sink": {
											"name": "UserAgent",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['UserId']"
										},
										"sink": {
											"name": "UserId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['UserKey']"
										},
										"sink": {
											"name": "UserKey",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['UserType']"
										},
										"sink": {
											"name": "UserType",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['WorkSpaceName']"
										},
										"sink": {
											"name": "WorkSpaceName",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['Workload']"
										},
										"sink": {
											"name": "Workload",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['WorkspaceId']"
										},
										"sink": {
											"name": "WorkspaceId",
											"type": "String"
										}
									}
								],
								"collectionReference": "$['activityEventEntities']",
								"mapComplexValuesToString": true
							}
						},
						"inputs": [
							{
								"referenceName": "Power_Bi_Admin",
								"type": "DatasetReference",
								"parameters": {
									"api": "activityevents",
									"params": {
										"value": "@concat('startDateTime=''',pipeline().parameters.StartDateTime,'''&endDateTime=''',pipeline().parameters.EndDateTime,'''')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "PowerBI_SQL_DB",
								"type": "DatasetReference",
								"parameters": {
									"TableName": {
										"value": "@concat('[',pipeline().parameters.SchemaName,'].PowerBIActivityEvent')",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"parameters": {
					"StartDateTime": {
						"type": "string"
					},
					"EndDateTime": {
						"type": "string"
					},
					"Token": {
						"type": "string"
					},
					"SchemaName": {
						"type": "string",
						"defaultValue": "pbtest"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Power_Bi_Admin')]",
				"[concat(variables('factoryId'), '/datasets/PowerBI_SQL_DB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TrackGuzzleStageRun')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "WaitUntilStageFinish",
						"type": "Until",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@if(variables('statusChangedToRunning'), not(equals(activity('GetStageStatus').output.firstRow[pipeline().parameters.stage], 'RUNNING')), or(or(equals(activity('GetStageStatus').output.firstRow[pipeline().parameters.stage], 'SUCCESS'), equals(activity('GetStageStatus').output.firstRow[pipeline().parameters.stage], 'WARNING')), or(equals(activity('GetStageStatus').output.firstRow[pipeline().parameters.stage], 'FAILED'), equals(activity('GetStageStatus').output.firstRow[pipeline().parameters.stage], 'ABORTED'))))",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Wait2minutes",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 120
									}
								},
								{
									"name": "GetStageStatus",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Wait2minutes",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "select @{pipeline().parameters.stage} from dbo.batch_control where batch_id=@{pipeline().parameters.batch_id}",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "GuzzleDB",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "If Status Changed To RUNNING",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "GetStageStatus",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@and(not(variables('statusChangedToRunning')), equals(activity('GetStageStatus').output.firstRow[pipeline().parameters.stage], 'RUNNING'))",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Set status changed to RUNNING",
												"type": "SetVariable",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"variableName": "statusChangedToRunning",
													"value": true
												}
											}
										]
									}
								}
							],
							"timeout": "0.04:00:00"
						}
					},
					{
						"name": "RaiseExceptionIfFailed",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "WaitUntilStageFinish",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "status",
							"value": {
								"value": "@if(or(equals(activity('GetStageStatus').output.firstRow[pipeline().parameters.stage], 'SUCCESS'), equals(activity('GetStageStatus').output.firstRow[pipeline().parameters.stage], 'WARNING')), 'SUCCESS', 1)",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"stage": {
						"type": "string"
					},
					"batch_id": {
						"type": "string"
					}
				},
				"variables": {
					"status": {
						"type": "String"
					},
					"statusChangedToRunning": {
						"type": "Boolean"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/GuzzleDB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "POST",
									"additionalHeaders": "Content-Type: application/json",
									"requestBody": "{\n  \"name\": \"csv_demo\",\n  \"jobParameters\": {\n    \"system\": \"EPStest\",\n    \"business_date\": \"2020-09-27 18:31:10\",\n    \"guzzle.spark.name\": \"guzzle_databricks_cluster\",\n    \"environment\": \"test\"\n  }\n}",
									"requestTimeout": ""
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "invokeJob",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/invokeJob')]"
			]
		}
	]
}